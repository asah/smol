-- Test zero-copy backward scan (lines 2303, 2590)
-- Covers keyp adjustment for zero-copy pages in backward scans
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
SET enable_seqscan = off;
SET enable_bitmapscan = off;
SET enable_indexonlyscan = on;
SET enable_indexscan = off;
-- Create table with unique keys to trigger zero-copy format
DROP TABLE IF EXISTS t_zerocopy_bwd CASCADE;
CREATE UNLOGGED TABLE t_zerocopy_bwd (k int4 PRIMARY KEY);
-- Insert unique sequential values (triggers zero-copy format)
INSERT INTO t_zerocopy_bwd SELECT i FROM generate_series(1, 10000) i;
ALTER TABLE t_zerocopy_bwd SET (autovacuum_enabled = off);
VACUUM (FREEZE, ANALYZE) t_zerocopy_bwd;
-- Create SMOL index
CREATE INDEX t_zerocopy_bwd_smol ON t_zerocopy_bwd USING smol(k);
-- VACUUM again to update visibility map for index-only scans
VACUUM (ANALYZE) t_zerocopy_bwd;
-- Verify zero-copy format is used
SELECT zerocopy_pages > 0 AS has_zerocopy FROM smol_inspect('t_zerocopy_bwd_smol');
 has_zerocopy 
--------------
 t
(1 row)

-- Test both forward and backward scans with zero-copy pages
-- Line 2303: Forward scan initial seek with lower bound (requires have_bound && dir != Backward)
-- Line 2590: Backward scan upper bound check (requires have_upper_bound && dir == Backward)
-- FORWARD scan with lower bound (triggers line 2303: binary search for >= bound)
EXPLAIN (COSTS OFF) SELECT k FROM t_zerocopy_bwd WHERE k > 5000 ORDER BY k LIMIT 5;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   ->  Index Only Scan using t_zerocopy_bwd_smol on t_zerocopy_bwd
         Disabled: true
         Index Cond: (k > 5000)
(4 rows)

SELECT k FROM t_zerocopy_bwd WHERE k > 5000 ORDER BY k LIMIT 5;
  k   
------
 5001
 5002
 5003
 5004
 5005
(5 rows)

-- FORWARD scan with >= bound
SELECT k FROM t_zerocopy_bwd WHERE k >= 7500 LIMIT 10;
  k   
------
 7500
 7501
 7502
 7503
 7504
 7505
 7506
 7507
 7508
 7509
(10 rows)

-- BACKWARD scan with upper bound < (triggers line 2590: upper bound check during iteration)
EXPLAIN (COSTS OFF) SELECT k FROM t_zerocopy_bwd WHERE k < 5000 ORDER BY k DESC LIMIT 5;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   ->  Index Only Scan Backward using t_zerocopy_bwd_smol on t_zerocopy_bwd
         Disabled: true
         Index Cond: (k < 5000)
(4 rows)

SELECT k FROM t_zerocopy_bwd WHERE k < 5000 ORDER BY k DESC LIMIT 5;
  k   
------
 4999
 4998
 4997
 4996
 4995
(5 rows)

-- BACKWARD scan with <= bound
SELECT k FROM t_zerocopy_bwd WHERE k <= 9500 ORDER BY k DESC LIMIT 10;
  k   
------
 9500
 9499
 9498
 9497
 9496
 9495
 9494
 9493
 9492
 9491
(10 rows)

-- Backward scan with range (both bounds, triggers both lines)
SELECT k FROM t_zerocopy_bwd WHERE k > 1000 AND k < 2000 ORDER BY k DESC LIMIT 10;
  k   
------
 1999
 1998
 1997
 1996
 1995
 1994
 1993
 1992
 1991
 1990
(10 rows)

-- Verify correctness
SELECT count(*) FROM t_zerocopy_bwd WHERE k < 5000;
 count 
-------
  4999
(1 row)

SELECT count(*) FROM t_zerocopy_bwd WHERE k <= 9500;
 count 
-------
  9500
(1 row)

SELECT count(*) FROM t_zerocopy_bwd WHERE k > 1000 AND k < 2000;
 count 
-------
   999
(1 row)

-- Cleanup
DROP TABLE t_zerocopy_bwd CASCADE;
