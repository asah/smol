-- Test parallel index build
-- This test verifies that parallel build infrastructure works
-- Uses test GUC to force parallel workers for coverage
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
-- Test 1: Force parallel build with test GUC (single key, no INCLUDE)
DROP TABLE IF EXISTS t_parallel_build CASCADE;
CREATE UNLOGGED TABLE t_parallel_build (k int4);
-- Insert data
INSERT INTO t_parallel_build
SELECT i FROM generate_series(1, 10000) i;
-- Force 2 parallel workers for testing
SET smol.test_force_parallel_workers = 2;
-- Note: Not showing LOG messages as they contain non-deterministic pointers/paths
-- The test verifies parallel build works by successfully creating the index
CREATE INDEX t_parallel_build_idx ON t_parallel_build USING smol(k);
RESET smol.test_force_parallel_workers;
-- Verify the index works
SELECT COUNT(*) FROM t_parallel_build WHERE k BETWEEN 1000 AND 2000;
 count 
-------
  1001
(1 row)

-- Test: request < 1 should be no-op (covers line 6448)
DROP INDEX t_parallel_build_idx;
SET smol.test_force_parallel_workers = 0;
CREATE INDEX t_parallel_build_idx ON t_parallel_build USING smol(k);
RESET smol.test_force_parallel_workers;
-- Test: Force zero workers launched by setting max_parallel_workers=0 (covers lines 6537-6539)
DROP INDEX t_parallel_build_idx;
SET max_parallel_workers = 0;
SET smol.test_force_parallel_workers = 2;
CREATE INDEX t_parallel_build_idx ON t_parallel_build USING smol(k);
RESET smol.test_force_parallel_workers;
RESET max_parallel_workers;
-- Test 2: Build with INCLUDE (not parallel-capable per current code)
DROP TABLE IF EXISTS t_parallel_inc CASCADE;
CREATE UNLOGGED TABLE t_parallel_inc (k int4, v int4);
INSERT INTO t_parallel_inc
SELECT i, i * 2 FROM generate_series(1, 10000) i;
-- This should NOT attempt parallel (has INCLUDE)
CREATE INDEX t_parallel_inc_idx ON t_parallel_inc USING smol(k) INCLUDE (v);
-- Verify
SELECT COUNT(*) FROM t_parallel_inc WHERE k BETWEEN 1000 AND 2000;
 count 
-------
  1001
(1 row)

-- Test 3: Two-column key (not parallel-capable per current code)
DROP TABLE IF EXISTS t_parallel_twocol CASCADE;
CREATE UNLOGGED TABLE t_parallel_twocol (k1 int4, k2 int4);
INSERT INTO t_parallel_twocol
SELECT i, i % 100 FROM generate_series(1, 10000) i;
-- This should NOT attempt parallel (two keys)
CREATE INDEX t_parallel_twocol_idx ON t_parallel_twocol USING smol(k1, k2);
-- Verify
SELECT COUNT(*) FROM t_parallel_twocol WHERE k1 BETWEEN 1000 AND 2000;
 count 
-------
  1001
(1 row)

-- Cleanup
DROP TABLE t_parallel_build CASCADE;
DROP TABLE t_parallel_inc CASCADE;
DROP TABLE t_parallel_twocol CASCADE;
