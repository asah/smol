-- smol_coverage_batch_prefetch.sql
-- Test coverage for parallel claim batch loops and aggressive prefetch
-- These features require forcing GUC values > 1
-- ============================================================================
-- PART 1: Parallel Claim Batch Coverage
-- Tests lines 2496, 2519, 2662, 2684, 3461, 3490
-- These loops only execute when smol_parallel_claim_batch > 1
-- ============================================================================
-- Force parallel claim batch > 1 to test the batch claiming loops
SET smol.parallel_claim_batch = 4;
-- Create a table with enough data to trigger parallel scans
CREATE UNLOGGED TABLE t_batch_coverage (k int4, v int4);
INSERT INTO t_batch_coverage SELECT i, i FROM generate_series(1, 100000) i;
CREATE INDEX t_batch_coverage_idx ON t_batch_coverage USING smol (k);
ANALYZE t_batch_coverage;
-- Force parallel execution with multiple workers
SET max_parallel_workers_per_gather = 4;
SET min_parallel_table_scan_size = 0;
SET min_parallel_index_scan_size = 0;
SET parallel_setup_cost = 0;
SET parallel_tuple_cost = 0;
-- Query that should trigger parallel scan with batch claiming
EXPLAIN SELECT COUNT(*) FROM t_batch_coverage WHERE k > 0;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=818.02..818.03 rows=1 width=8)
   ->  Gather  (cost=818.00..818.01 rows=4 width=8)
         Workers Planned: 4
         ->  Partial Aggregate  (cost=818.00..818.01 rows=1 width=8)
               ->  Parallel Seq Scan on t_batch_coverage  (cost=0.00..755.50 rows=25000 width=0)
                     Filter: (k > 0)
(6 rows)

SELECT COUNT(*) FROM t_batch_coverage WHERE k > 0;
 count  
--------
 100000
(1 row)

-- Two-column index to test two-column batch claiming paths
CREATE UNLOGGED TABLE t_batch_twocol (k1 int4, k2 int4, v int4);
INSERT INTO t_batch_twocol SELECT i/100, i%100, i FROM generate_series(1, 100000) i;
CREATE INDEX t_batch_twocol_idx ON t_batch_twocol USING smol (k1, k2);
ANALYZE t_batch_twocol;
EXPLAIN SELECT COUNT(*) FROM t_batch_twocol WHERE k1 > 0;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=915.96..915.97 rows=1 width=8)
   ->  Gather  (cost=915.94..915.95 rows=4 width=8)
         Workers Planned: 4
         ->  Partial Aggregate  (cost=915.94..915.95 rows=1 width=8)
               ->  Parallel Seq Scan on t_batch_twocol  (cost=0.00..853.50 rows=24975 width=0)
                     Filter: (k1 > 0)
(6 rows)

SELECT COUNT(*) FROM t_batch_twocol WHERE k1 > 0;
 count 
-------
 99901
(1 row)

-- Backward scan with batch claiming - verify rows are returned in descending order
SELECT k FROM t_batch_coverage WHERE k >= 99990 ORDER BY k DESC;
   k    
--------
 100000
  99999
  99998
  99997
  99996
  99995
  99994
  99993
  99992
  99991
  99990
(11 rows)

-- ============================================================================
-- PART 2: Aggressive Prefetch Coverage
-- Tests lines 3426-3437
-- These lines only execute when smol_prefetch_depth > 1 in parallel INDEX scans
-- ============================================================================
-- Force prefetch depth > 1 to test aggressive prefetching
SET smol.prefetch_depth = 4;
-- Force index scans instead of seq scans
SET enable_seqscan = off;
-- Query with prefetching on single-column index (parallel index scan)
SELECT COUNT(*) FROM t_batch_coverage WHERE k BETWEEN 1000 AND 50000;
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
 count 
-------
 49001
(1 row)

-- Query with prefetching on two-column index (parallel index scan)
SELECT COUNT(*) FROM t_batch_twocol WHERE k1 BETWEEN 10 AND 500;
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
 count 
-------
 49100
(1 row)

-- Large range scan to ensure prefetch code is exercised
SELECT COUNT(*) FROM t_batch_coverage WHERE k > 100;
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
WARNING:  smol: prefetch_depth > 1 not fully tested
 count 
-------
 99900
(1 row)

-- Reset
SET enable_seqscan = on;
-- Reset to defaults
SET smol.parallel_claim_batch = 1;
SET smol.prefetch_depth = 1;
-- ============================================================================
-- PART 3: Upper Bound Checking for Non-INT/TEXT Types
-- Tests lines 1048-1050 - backward scans with upper bounds on UUID/TIMESTAMP/FLOAT8
-- ============================================================================
-- UUID backward scan with upper bound
CREATE UNLOGGED TABLE t_uuid_upper (k uuid);
INSERT INTO t_uuid_upper SELECT ('00000000-0000-0000-0000-'|| lpad(i::text, 12, '0'))::uuid FROM generate_series(1, 100) i;
CREATE INDEX t_uuid_upper_idx ON t_uuid_upper USING smol (k);
-- Backward scan with upper bound on UUID
SELECT k FROM t_uuid_upper WHERE k < 'ffffffff-ffff-ffff-ffff-ffffffffffff'::uuid ORDER BY k DESC LIMIT 10;
                  k                   
--------------------------------------
 00000000-0000-0000-0000-000000000100
 00000000-0000-0000-0000-000000000099
 00000000-0000-0000-0000-000000000098
 00000000-0000-0000-0000-000000000097
 00000000-0000-0000-0000-000000000096
 00000000-0000-0000-0000-000000000095
 00000000-0000-0000-0000-000000000094
 00000000-0000-0000-0000-000000000093
 00000000-0000-0000-0000-000000000092
 00000000-0000-0000-0000-000000000091
(10 rows)

DROP TABLE t_uuid_upper;
-- ============================================================================
-- PART 4: Bool Type (key_len=1) in RLE Path
-- Tests line 3057 - bool type backward scan in RLE path
-- ============================================================================
-- Bool type in RLE format (many duplicates)
CREATE UNLOGGED TABLE t_bool_rle (k bool);
INSERT INTO t_bool_rle SELECT (i % 2 = 0) FROM generate_series(1, 10000) i;
CREATE INDEX t_bool_rle_idx ON t_bool_rle USING smol (k);
-- Backward scan with bool (key_len=1) in RLE path
BEGIN;
DECLARE cur_bool CURSOR FOR SELECT k FROM t_bool_rle ORDER BY k DESC;
FETCH 5 FROM cur_bool;
 k 
---
 t
 t
 t
 t
 t
(5 rows)

COMMIT;
DROP TABLE t_bool_rle;
-- Cleanup
DROP TABLE t_batch_coverage;
DROP TABLE t_batch_twocol;
