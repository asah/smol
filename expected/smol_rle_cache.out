-- RLE + duplicate-caching regression (fast)
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
-- A) RLE on single-key with heavy duplicates
DROP TABLE IF EXISTS r1 CASCADE;
CREATE UNLOGGED TABLE r1(a int4);
INSERT INTO r1 SELECT 42 FROM generate_series(1,2000);
INSERT INTO r1 SELECT i FROM generate_series(0,19) AS s(i);
ANALYZE r1;
DROP INDEX IF EXISTS r1_smol;
CREATE INDEX r1_smol ON r1 USING smol(a);
SET enable_seqscan=off; SET enable_bitmapscan=off; SET enable_indexscan=off; SET enable_indexonlyscan=on;
-- correctness checks
SELECT count(*) = 2000 AS rle_count_ok FROM r1 WHERE a = 42;
 rle_count_ok 
--------------
 t
(1 row)

SELECT (SELECT array_agg(a) FROM (SELECT a FROM r1 WHERE a >= 18 ORDER BY a LIMIT 5) s)
       = ARRAY[18,19,42,42,42] AS rle_order_ok;
 rle_order_ok 
--------------
 t
(1 row)

-- B) Duplicate-key caching for INCLUDE columns (identical includes within runs)
DROP TABLE IF EXISTS ic1 CASCADE;
CREATE UNLOGGED TABLE ic1(b int4, a1 int4, a2 int4);
INSERT INTO ic1 SELECT 42, 111, 222 FROM generate_series(1,2000);
INSERT INTO ic1 SELECT 7,  111, 222 FROM generate_series(1,10);
ANALYZE ic1;
DROP INDEX IF EXISTS ic1_smol;
CREATE INDEX ic1_smol ON ic1 USING smol(b) INCLUDE (a1,a2);
SET enable_indexscan=off; SET enable_indexonlyscan=on;
-- capture baseline
SELECT sum(a1)::bigint AS s1, sum(a2)::bigint AS s2, count(*)::bigint AS cnt FROM ic1 WHERE b = 42; \gset
   s1   |   s2   | cnt  
--------+--------+------
 222000 | 444000 | 2000
(1 row)

SELECT (SELECT sum(a1)::bigint FROM ic1 WHERE b = 42) = :'s1' AS match_off1,
       (SELECT sum(a2)::bigint FROM ic1 WHERE b = 42) = :'s2' AS match_off2,
       (SELECT count(*)::bigint FROM ic1 WHERE b = 42) = :'cnt' AS match_off3;
 match_off1 | match_off2 | match_off3 
------------+------------+------------
 t          | t          | t
(1 row)

SELECT (SELECT sum(a1)::bigint FROM ic1 WHERE b = 42) = :'s1' AS match_on1,
       (SELECT sum(a2)::bigint FROM ic1 WHERE b = 42) = :'s2' AS match_on2,
       (SELECT count(*)::bigint FROM ic1 WHERE b = 42) = :'cnt' AS match_on3;
 match_on1 | match_on2 | match_on3 
-----------+-----------+-----------
 t         | t         | t
(1 row)

