-- Test to trigger smol_rightmost_in_subtree loop (lines 5409-5417)
-- Requires backward scan in very deep tree where target is first leaf in subtree
SET smol.key_rle_version = 'v2';
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
-- Force extremely deep tree structure
-- Use very small fanout and very few tuples per page to maximize tree height
SET smol.test_max_tuples_per_page = 20;  -- Very small to create many leaves
SET smol.test_max_internal_fanout = 3;    -- Very small to create tall internal structure
DROP TABLE IF EXISTS t_deep_backward CASCADE;
CREATE UNLOGGED TABLE t_deep_backward (k int4, data text);
-- Insert data in a pattern that will create specific tree structure
-- We need enough data to create height >= 4 with our aggressive GUCs
-- Height 4: 20 * 3 * 3 * 3 = 540 rows minimum
-- Use 5000 rows to ensure height >= 5
INSERT INTO t_deep_backward
SELECT i, 'data' || i
FROM generate_series(1, 5000) i;
CREATE INDEX t_deep_backward_idx ON t_deep_backward USING smol(k);
-- Inspect the tree structure
SELECT total_pages, leaf_pages FROM smol_inspect('t_deep_backward_idx'::regclass);
 total_pages | leaf_pages 
-------------+------------
           7 |          4
(1 row)

-- Force backward scan with specific target
SET enable_seqscan = off;
SET enable_indexscan = off;
SET enable_bitmapscan = off;
SET enable_indexonlyscan = on;
SET max_parallel_workers_per_gather = 0;
-- Critical: Use smol_test_backward_scan with a target value
-- that should be the first leaf in a deep subtree.
-- With our tree structure (fanout=3, 20 tuples/page), we can calculate:
-- First leaf page has tuples 1-20
-- Second leaf page has tuples 21-40
-- Third leaf page has tuples 41-60
-- Fourth leaf page has tuples 61-80 (this is first child of second internal node)
--
-- If we do a backward scan starting from tuple 61, it should:
-- 1. Find tuple 61 (first tuple of a new internal node's first child)
-- 2. Need to find previous tuple (60)
-- 3. That requires going to previous sibling internal node's rightmost leaf
-- 4. This should trigger smol_rightmost_in_subtree with levels >= 2
-- Try multiple strategic positions that should be at internal node boundaries
SELECT smol_test_backward_scan('t_deep_backward_idx'::regclass, 61);
 smol_test_backward_scan 
-------------------------
                      10
(1 row)

SELECT smol_test_backward_scan('t_deep_backward_idx'::regclass, 121);
 smol_test_backward_scan 
-------------------------
                      10
(1 row)

SELECT smol_test_backward_scan('t_deep_backward_idx'::regclass, 181);
 smol_test_backward_scan 
-------------------------
                      10
(1 row)

SELECT smol_test_backward_scan('t_deep_backward_idx'::regclass, 241);
 smol_test_backward_scan 
-------------------------
                      10
(1 row)

-- Also try with ORDER BY DESC to trigger backward navigation
SELECT k FROM t_deep_backward WHERE k >= 60 AND k <= 65 ORDER BY k DESC;
 k  
----
 65
 64
 63
 62
 61
 60
(6 rows)

SELECT k FROM t_deep_backward WHERE k >= 120 AND k <= 125 ORDER BY k DESC;
  k  
-----
 125
 124
 123
 122
 121
 120
(6 rows)

-- Reset GUCs
RESET smol.test_max_tuples_per_page;
RESET smol.test_max_internal_fanout;
-- Cleanup
DROP TABLE t_deep_backward CASCADE;
