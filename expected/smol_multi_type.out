-- Test multi-type operator family to cover validation continue (line 2568)
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
-- Create a new operator family for integers
CREATE OPERATOR FAMILY integer_family USING smol;
-- Create int4 operator class in this family
-- CREATE OPERATOR CLASS automatically adds operators to the family
CREATE OPERATOR CLASS int4_ops_multi
    FOR TYPE int4 USING smol FAMILY integer_family AS
    OPERATOR 1 <,
    OPERATOR 2 <=,
    OPERATOR 3 =,
    OPERATOR 4 >=,
    OPERATOR 5 >,
    FUNCTION 1 btint4cmp(int4, int4);
-- Create an int2 operator class in the SAME family (creates cross-type scenario)
-- When validating this class, it should SKIP int4 entries (line 2568)
CREATE OPERATOR CLASS int2_ops_multi
    FOR TYPE int2 USING smol FAMILY integer_family AS
    OPERATOR 1 <,
    OPERATOR 2 <=,
    OPERATOR 3 =,
    OPERATOR 4 >=,
    OPERATOR 5 >,
    FUNCTION 1 btint2cmp(int2, int2);
-- Test it works
CREATE TABLE t_int2_multi (k int2);
INSERT INTO t_int2_multi SELECT i::int2 FROM generate_series(1, 100) i;
-- Use the new int2_ops_multi operator class
CREATE INDEX t_int2_multi_idx ON t_int2_multi USING smol(k int2_ops_multi);
SELECT count(*) FROM t_int2_multi WHERE k > 50::int2;
 count 
-------
    50
(1 row)

-- Cleanup
DROP TABLE t_int2_multi CASCADE;
DROP OPERATOR CLASS int2_ops_multi USING smol;
DROP OPERATOR CLASS int4_ops_multi USING smol;
DROP OPERATOR FAMILY integer_family USING smol;
