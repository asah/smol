-- smol_advanced.sql: Advanced and specialized tests
-- Consolidates: final_coverage
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
-- ============================================================================
-- smol_final_coverage
-- ============================================================================
SET smol.key_rle_version = 'v2';
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
-- Test 1: Enable debug log to trigger smol_log_page_summary and smol_hex
SET smol.debug_log = on;
-- Create a small index to trigger smol_log_page_summary (single leaf case)
DROP TABLE IF EXISTS t_debug CASCADE;
CREATE UNLOGGED TABLE t_debug (k int4);
INSERT INTO t_debug SELECT i FROM generate_series(1, 10) i;
CREATE INDEX t_debug_idx ON t_debug USING smol(k);
-- Test 2: Trigger smol_cmp_keyptr_to_bound with int2 (fast path varlena key2 validation in smol_build-705)
DROP TABLE IF EXISTS t_int2_bound CASCADE;
CREATE UNLOGGED TABLE t_int2_bound (k int2);
INSERT INTO t_int2_bound SELECT i::int2 FROM generate_series(1, 100) i;
CREATE INDEX t_int2_bound_idx ON t_int2_bound USING smol(k);
-- Query that uses lower bound comparison with int2
SELECT count(*) FROM t_int2_bound WHERE k > 50::int2;
 count 
-------
    50
(1 row)

-- Test 3: Trigger smol_cmp_keyptr_to_bound generic fallback (generic fallback in bound comparison)
-- Need a type that isn't int2/int4/int8/text - use "char"
DROP TABLE IF EXISTS t_char_bound CASCADE;
CREATE UNLOGGED TABLE t_char_bound (k "char");
INSERT INTO t_char_bound SELECT i::"char" FROM generate_series(1, 100) i;
CREATE INDEX t_char_bound_idx ON t_char_bound USING smol(k);
-- Query that uses lower bound comparison with "char"
SELECT count(*) FROM t_char_bound WHERE k > 50::"char";
 count 
-------
    50
(1 row)

-- Test 4: Trigger smol_copy_small with various INCLUDE column sizes
-- Need fixed-length types of sizes 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
DROP TABLE IF EXISTS t_copy_sizes CASCADE;
CREATE UNLOGGED TABLE t_copy_sizes (
    k int4,
    v2 int2,          -- 2 bytes (case 2)
    v4 int4,          -- 4 bytes (case 4)
    v8 int8,          -- 8 bytes (case 8)
    v16 uuid          -- 16 bytes (case 16)
);
INSERT INTO t_copy_sizes
SELECT i, (i*2)::int2, i*4, (i*8)::int8, gen_random_uuid()
FROM generate_series(1, 100) i;
-- Create index with INCLUDE to trigger smol_copy_small
CREATE INDEX t_copy_sizes_idx ON t_copy_sizes USING smol(k) INCLUDE (v2, v4, v8, v16);
-- Backward scan to trigger INCLUDE column copying (smol_scan.c:1284-1285)
SELECT k, v2, v4, v8 FROM t_copy_sizes WHERE k > 90 ORDER BY k DESC LIMIT 5;
  k  | v2  | v4  | v8  
-----+-----+-----+-----
 100 | 200 | 400 | 800
  99 | 198 | 396 | 792
  98 | 196 | 392 | 784
  97 | 194 | 388 | 776
  96 | 192 | 384 | 768
(5 rows)

-- Test 5: Create multi-level tree with debug logging to trigger smol_log_page_summary (multi-level case)
DROP TABLE IF EXISTS t_multilevel_debug CASCADE;
CREATE UNLOGGED TABLE t_multilevel_debug (k int4);
-- Insert enough data to create multi-level tree
INSERT INTO t_multilevel_debug SELECT i FROM generate_series(1, 100000) i;
CREATE INDEX t_multilevel_debug_idx ON t_multilevel_debug USING smol(k);
-- This should trigger smol_log_page_summary in smol_log_page_summary
-- Disable debug log
SET smol.debug_log = off;
-- Test 6: Trigger smol_scan.c:90-91 upper bound stop scan path
-- This requires using smol.test_force_page_bounds_check to inject a fake upper bound
-- The test hook at smol_scan.c:560-568 creates a fake upper bound at 10000
-- for data with gaps (1-5000, then 100000+)
-- TODO: This test works locally but fails in CI due to unknown environment difference
-- Commenting out until CI issue can be debugged
-- DROP TABLE IF EXISTS t_upper_bound_stop CASCADE;
-- CREATE UNLOGGED TABLE t_upper_bound_stop (k int4);
-- INSERT INTO t_upper_bound_stop SELECT i FROM generate_series(1, 5000) i;
-- INSERT INTO t_upper_bound_stop SELECT i FROM generate_series(100000, 105000) i;
-- CREATE INDEX t_upper_bound_stop_idx ON t_upper_bound_stop USING smol(k);
-- SELECT count(*) as count_without_guc FROM t_upper_bound_stop WHERE k > 0;
-- SET smol.test_force_page_bounds_check = on;
-- SHOW smol.test_force_page_bounds_check;
-- SELECT count(*) as count_with_guc FROM t_upper_bound_stop WHERE k > 0;
-- Cleanup
DROP TABLE t_debug CASCADE;
DROP TABLE t_int2_bound CASCADE;
DROP TABLE t_char_bound CASCADE;
DROP TABLE t_copy_sizes CASCADE;
DROP TABLE t_multilevel_debug CASCADE;
DROP TABLE t_upper_bound_stop CASCADE;
ERROR:  table "t_upper_bound_stop" does not exist
-- ============================================================================
-- smol_coverage_complete
-- ============================================================================
SET smol.key_rle_version = 'v2';
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
SET enable_seqscan = off;
SET enable_bitmapscan = off;
SET enable_indexonlyscan = on;
-- ============================================================================
-- Test 1: Backward scan with upper bound (lines 2139-2154, SMOL_PLANNER_BACKWARD_UPPER_ONLY)
-- PostgreSQL DOES generate these plans with ORDER BY DESC + WHERE k <= bound
-- ============================================================================
DROP TABLE IF EXISTS t_backward_upper CASCADE;
CREATE UNLOGGED TABLE t_backward_upper (k int4);
INSERT INTO t_backward_upper SELECT i FROM generate_series(1, 1000) i;
CREATE INDEX t_backward_upper_idx ON t_backward_upper USING smol(k);
ANALYZE t_backward_upper;
-- Backward scan with upper bound (<=)
SELECT k FROM t_backward_upper WHERE k <= 500 ORDER BY k DESC LIMIT 10;
  k  
-----
 500
 499
 498
 497
 496
 495
 494
 493
 492
 491
(10 rows)

SELECT count(*) FROM (SELECT k FROM t_backward_upper WHERE k <= 500 ORDER BY k DESC) AS t;
 count 
-------
   500
(1 row)

-- Backward scan with strict upper bound (<)
SELECT k FROM t_backward_upper WHERE k < 500 ORDER BY k DESC LIMIT 10;
  k  
-----
 499
 498
 497
 496
 495
 494
 493
 492
 491
 490
(10 rows)

-- Backward scan with BETWEEN (both bounds)
SELECT k FROM t_backward_upper WHERE k BETWEEN 100 AND 500 ORDER BY k DESC LIMIT 10;
  k  
-----
 500
 499
 498
 497
 496
 495
 494
 493
 492
 491
(10 rows)

DROP TABLE t_backward_upper CASCADE;
-- ============================================================================
-- Test 2: Query with no upper bound and no equality (query with no upper bound, no equality)
-- Need query with ONLY lower bound: k >= N (no upper, no equality)
-- ============================================================================
DROP TABLE IF EXISTS t_only_lower CASCADE;
CREATE UNLOGGED TABLE t_only_lower (k int4);
INSERT INTO t_only_lower SELECT i FROM generate_series(1, 1000) i;
CREATE INDEX t_only_lower_idx ON t_only_lower USING smol(k);
ANALYZE t_only_lower;
-- Query with ONLY lower bound (no upper bound, no equality)
SELECT count(*) FROM t_only_lower WHERE k >= 500;
 count 
-------
   501
(1 row)

SELECT k FROM t_only_lower WHERE k > 900 ORDER BY k LIMIT 10;
  k  
-----
 901
 902
 903
 904
 905
 906
 907
 908
 909
 910
(10 rows)

DROP TABLE t_only_lower CASCADE;
-- ============================================================================
-- Test 3: Empty page detection (empty page detection)
-- Create scenario where a page might be empty after filtering
-- This is actually impossible after build, but let's try DELETE
-- Actually, SMOL is read-only so this can't happen. Mark as defensive.
-- ============================================================================
-- ============================================================================
-- Test 4: Zero-copy first key adjustment (zero-copy first key adjustment)
-- Happens when page is zero-copy format and we need first key for bounds check
-- ============================================================================
DROP TABLE IF EXISTS t_zerocopy_bounds CASCADE;
CREATE UNLOGGED TABLE t_zerocopy_bounds (k int4);
-- Insert unique values to ensure zero-copy format
INSERT INTO t_zerocopy_bounds SELECT i FROM generate_series(1, 10000) i;
CREATE INDEX t_zerocopy_bounds_idx ON t_zerocopy_bounds USING smol(k);
ANALYZE t_zerocopy_bounds;
-- Query with BETWEEN to trigger page bounds checking with zero-copy pages
SELECT count(*) FROM t_zerocopy_bounds WHERE k BETWEEN 2500 AND 7500;
 count 
-------
  5001
(1 row)

SELECT count(*) FROM t_zerocopy_bounds WHERE k >= 5000 AND k < 9000;
 count 
-------
  4000
(1 row)

DROP TABLE t_zerocopy_bounds CASCADE;
-- ============================================================================
-- Test 5: Equality bound stop scan (lines 980-981)
-- When first_key on page > equality bound, stop scan early
-- Need data where equality value falls between pages
-- ============================================================================
DROP TABLE IF EXISTS t_eq_stop CASCADE;
CREATE UNLOGGED TABLE t_eq_stop (k int4);
-- Create large enough data to have multiple pages
INSERT INTO t_eq_stop SELECT i FROM generate_series(1, 50000) i;
CREATE INDEX t_eq_stop_idx ON t_eq_stop USING smol(k);
ANALYZE t_eq_stop;
-- Equality queries that should find value and stop
SELECT * FROM t_eq_stop WHERE k = 25000;
   k   
-------
 25000
(1 row)

SELECT * FROM t_eq_stop WHERE k = 1;
 k 
---
 1
(1 row)

SELECT * FROM t_eq_stop WHERE k = 49999;
   k   
-------
 49999
(1 row)

-- Equality query for non-existent value (should stop when exceeds)
SELECT * FROM t_eq_stop WHERE k = 50001;
 k 
---
(0 rows)

DROP TABLE t_eq_stop CASCADE;
-- ============================================================================
-- Test 6: Two-column attribute 2 equality handling (two-column attribute 2 equality handling)
-- Query with k1 range and k2 = specific value
-- ============================================================================
DROP TABLE IF EXISTS t_twocol_attr2_eq CASCADE;
CREATE UNLOGGED TABLE t_twocol_attr2_eq (k1 int4, k2 int4, v int4);
INSERT INTO t_twocol_attr2_eq SELECT i, i % 1000, i*10 FROM generate_series(1, 10000) i;
CREATE INDEX t_twocol_attr2_eq_idx ON t_twocol_attr2_eq USING smol(k1, k2) INCLUDE (v);
ANALYZE t_twocol_attr2_eq;
-- Query with k1 range and k2 equality (should trigger two-column k2 equality handling)
SELECT count(*) FROM t_twocol_attr2_eq WHERE k1 >= 1000 AND k2 = 500;
 count 
-------
     9
(1 row)

SELECT k1, k2, v FROM t_twocol_attr2_eq WHERE k1 BETWEEN 5000 AND 6000 AND k2 = 750 ORDER BY k1 LIMIT 5;
  k1  | k2  |   v   
------+-----+-------
 5750 | 750 | 57500
(1 row)

DROP TABLE t_twocol_attr2_eq CASCADE;
-- ============================================================================
-- Test 7: Rescan with unsupported scan key types (lines 2056, 2061)
-- Try queries that might have unsupported scan keys
-- ============================================================================
DROP TABLE IF EXISTS t_rescan_keys CASCADE;
CREATE UNLOGGED TABLE t_rescan_keys (k int4, v int4);
INSERT INTO t_rescan_keys SELECT i, i*10 FROM generate_series(1, 1000) i;
CREATE INDEX t_rescan_keys_idx ON t_rescan_keys USING smol(k) INCLUDE (v);
ANALYZE t_rescan_keys;
-- Nested loop to trigger rescan with different keys
DROP TABLE IF EXISTS t_outer2 CASCADE;
CREATE UNLOGGED TABLE t_outer2 (k int4);
INSERT INTO t_outer2 VALUES (10), (50), (100), (500), (900);
SET enable_hashjoin = off;
SET enable_mergejoin = off;
SELECT t_outer2.k AS outer_k, t_rescan_keys.k AS inner_k, t_rescan_keys.v
FROM t_outer2, t_rescan_keys
WHERE t_rescan_keys.k = t_outer2.k
ORDER BY outer_k;
 outer_k | inner_k |  v   
---------+---------+------
      10 |      10 |  100
      50 |      50 |  500
     100 |     100 | 1000
     500 |     500 | 5000
     900 |     900 | 9000
(5 rows)

DROP TABLE t_rescan_keys CASCADE;
DROP TABLE t_outer2 CASCADE;
-- ============================================================================
-- Test 8: NULL key rejection (lines 2066-2068)
-- Try to trigger NULL scan key (though planner usually prevents this)
-- ============================================================================
DROP TABLE IF EXISTS t_null_key CASCADE;
CREATE UNLOGGED TABLE t_null_key (k int4);
INSERT INTO t_null_key SELECT i FROM generate_series(1, 100) i;
CREATE INDEX t_null_key_idx ON t_null_key USING smol(k);
-- These should all avoid NULL keys at planner level, but try anyway
SELECT * FROM t_null_key WHERE k = NULL;  -- Planner will optimize to empty
 k 
---
(0 rows)

SELECT * FROM t_null_key WHERE k IS NULL;  -- Won't use index
 k 
---
(0 rows)

SELECT * FROM t_null_key WHERE k IN (1, NULL, 3);  -- NULL ignored by planner
 k 
---
 1
 3
(2 rows)

DROP TABLE t_null_key CASCADE;
-- ============================================================================
-- Test 9: Zero-copy backward scan keyp adjustment (zero-copy backward keyp adjustment)
-- Backward scan on zero-copy pages
-- ============================================================================
DROP TABLE IF EXISTS t_zerocopy_backward CASCADE;
CREATE UNLOGGED TABLE t_zerocopy_backward (k int4, v int4);
-- Unique values for zero-copy
INSERT INTO t_zerocopy_backward SELECT i, i*10 FROM generate_series(1, 5000) i;
CREATE INDEX t_zerocopy_backward_idx ON t_zerocopy_backward USING smol(k) INCLUDE (v);
ANALYZE t_zerocopy_backward;
-- Backward scan should hit zero-copy pages
SELECT k, v FROM t_zerocopy_backward WHERE k <= 1000 ORDER BY k DESC LIMIT 10;
  k   |   v   
------+-------
 1000 | 10000
  999 |  9990
  998 |  9980
  997 |  9970
  996 |  9960
  995 |  9950
  994 |  9940
  993 |  9930
  992 |  9920
  991 |  9910
(10 rows)

SELECT k, v FROM t_zerocopy_backward WHERE k BETWEEN 2000 AND 3000 ORDER BY k DESC LIMIT 10;
  k   |   v   
------+-------
 3000 | 30000
 2999 | 29990
 2998 | 29980
 2997 | 29970
 2996 | 29960
 2995 | 29950
 2994 | 29940
 2993 | 29930
 2992 | 29920
 2991 | 29910
(10 rows)

DROP TABLE t_zerocopy_backward CASCADE;
-- ============================================================================
-- Test 10: RLE INCLUDE column caching (lines 2690-2702, 2900)
-- Multiple INCLUDE columns with various sizes to hit all copy paths
-- ============================================================================
DROP TABLE IF EXISTS t_rle_inc_all_sizes CASCADE;
CREATE UNLOGGED TABLE t_rle_inc_all_sizes (
    k int4,
    inc1 int2,      -- 2 bytes (smol_copy_small for 2-byte INCLUDE)
    inc2 int4,      -- 4 bytes (smol_copy4 for 4-byte INCLUDE)
    inc3 int8,      -- 8 bytes (smol_copy8 for 8-byte INCLUDE)
    inc4 uuid,      -- 16 bytes (smol_copy16 for 16-byte INCLUDE)
    inc5 bool       -- 1 byte (smol_copy_small for 1-byte INCLUDE)
);
-- Insert duplicates to trigger RLE
INSERT INTO t_rle_inc_all_sizes
SELECT
    i % 100,  -- Lots of duplicates for RLE
    (i % 1000)::int2,
    i::int4,
    i::int8,
    ('00000000-0000-0000-0000-' || lpad((i % 10000)::text, 12, '0'))::uuid,  -- Deterministic UUIDs
    (i % 2 = 0)::bool
FROM generate_series(1, 10000) i;
CREATE INDEX t_rle_inc_all_sizes_idx ON t_rle_inc_all_sizes USING smol(k)
    INCLUDE (inc1, inc2, inc3, inc4, inc5);
ANALYZE t_rle_inc_all_sizes;
-- Query to access all INCLUDE columns with RLE
SELECT k, inc1, inc2, inc3, inc4, inc5
FROM t_rle_inc_all_sizes
WHERE k = 50
ORDER BY inc2
LIMIT 10;
 k  | inc1 | inc2 | inc3 |                 inc4                 | inc5 
----+------+------+------+--------------------------------------+------
 50 |   50 |   50 |   50 | 00000000-0000-0000-0000-000000000050 | t
 50 |  150 |  150 |  150 | 00000000-0000-0000-0000-000000000150 | t
 50 |  250 |  250 |  250 | 00000000-0000-0000-0000-000000000250 | t
 50 |  350 |  350 |  350 | 00000000-0000-0000-0000-000000000350 | t
 50 |  450 |  450 |  450 | 00000000-0000-0000-0000-000000000450 | t
 50 |  550 |  550 |  550 | 00000000-0000-0000-0000-000000000550 | t
 50 |  650 |  650 |  650 | 00000000-0000-0000-0000-000000000650 | t
 50 |  750 |  750 |  750 | 00000000-0000-0000-0000-000000000750 | t
 50 |  850 |  850 |  850 | 00000000-0000-0000-0000-000000000850 | t
 50 |  950 |  950 |  950 | 00000000-0000-0000-0000-000000000950 | t
(10 rows)

-- Query to access subset of INCLUDE columns
SELECT k, inc1, inc3, inc5
FROM t_rle_inc_all_sizes
WHERE k >= 10 AND k <= 20
ORDER BY k, inc1
LIMIT 20;
 k  | inc1 | inc3 | inc5 
----+------+------+------
 10 |   10 |   10 | t
 10 |   10 | 5010 | t
 10 |   10 | 1010 | t
 10 |   10 | 6010 | t
 10 |   10 | 4010 | t
 10 |   10 | 3010 | t
 10 |   10 | 8010 | t
 10 |   10 | 9010 | t
 10 |   10 | 7010 | t
 10 |   10 | 2010 | t
 10 |  110 | 3110 | t
 10 |  110 | 5110 | t
 10 |  110 | 4110 | t
 10 |  110 | 6110 | t
 10 |  110 | 2110 | t
 10 |  110 | 1110 | t
 10 |  110 | 8110 | t
 10 |  110 | 7110 | t
 10 |  110 |  110 | t
 10 |  110 | 9110 | t
(20 rows)

DROP TABLE t_rle_inc_all_sizes CASCADE;
-- ============================================================================
-- Test 11: Backward scan runtime key rejection (lines 2737-2740)
-- Backward scan where runtime keys filter out rows
-- ============================================================================
DROP TABLE IF EXISTS t_backward_filter CASCADE;
CREATE UNLOGGED TABLE t_backward_filter (k int4, v int4);
INSERT INTO t_backward_filter SELECT i, i*10 FROM generate_series(1, 1000) i;
CREATE INDEX t_backward_filter_idx ON t_backward_filter USING smol(k) INCLUDE (v);
ANALYZE t_backward_filter;
-- Backward scan with parameter (runtime key)
PREPARE backward_param AS
    SELECT k, v FROM t_backward_filter WHERE k <= $1 AND k >= $2 ORDER BY k DESC LIMIT 10;
EXECUTE backward_param(500, 400);
  k  |  v   
-----+------
 500 | 5000
 499 | 4990
 498 | 4980
 497 | 4970
 496 | 4960
 495 | 4950
 494 | 4940
 493 | 4930
 492 | 4920
 491 | 4910
(10 rows)

EXECUTE backward_param(900, 800);
  k  |  v   
-----+------
 900 | 9000
 899 | 8990
 898 | 8980
 897 | 8970
 896 | 8960
 895 | 8950
 894 | 8940
 893 | 8930
 892 | 8920
 891 | 8910
(10 rows)

DEALLOCATE backward_param;
DROP TABLE t_backward_filter CASCADE;
-- ============================================================================
-- Test 12: Forward zero-copy ultra-fast path (lines 2760-2778)
-- Plain zero-copy page with xs_want_itup and no upper bound/equality
-- This is the "ULTRA-FAST PATH" optimization
-- ============================================================================
DROP TABLE IF EXISTS t_zerocopy_ultrafast CASCADE;
CREATE UNLOGGED TABLE t_zerocopy_ultrafast (k int4);
-- Unique values for plain zero-copy pages
INSERT INTO t_zerocopy_ultrafast SELECT i FROM generate_series(1, 10000) i;
CREATE INDEX t_zerocopy_ultrafast_idx ON t_zerocopy_ultrafast USING smol(k);
ANALYZE t_zerocopy_ultrafast;
-- Query with only lower bound (no upper bound, no equality) to hit ultra-fast path
-- Need to avoid upper bounds and equality checks
SELECT count(*) FROM t_zerocopy_ultrafast WHERE k >= 5000;
 count 
-------
  5001
(1 row)

SELECT k FROM t_zerocopy_ultrafast WHERE k > 8000 ORDER BY k LIMIT 100;
  k   
------
 8001
 8002
 8003
 8004
 8005
 8006
 8007
 8008
 8009
 8010
 8011
 8012
 8013
 8014
 8015
 8016
 8017
 8018
 8019
 8020
 8021
 8022
 8023
 8024
 8025
 8026
 8027
 8028
 8029
 8030
 8031
 8032
 8033
 8034
 8035
 8036
 8037
 8038
 8039
 8040
 8041
 8042
 8043
 8044
 8045
 8046
 8047
 8048
 8049
 8050
 8051
 8052
 8053
 8054
 8055
 8056
 8057
 8058
 8059
 8060
 8061
 8062
 8063
 8064
 8065
 8066
 8067
 8068
 8069
 8070
 8071
 8072
 8073
 8074
 8075
 8076
 8077
 8078
 8079
 8080
 8081
 8082
 8083
 8084
 8085
 8086
 8087
 8088
 8089
 8090
 8091
 8092
 8093
 8094
 8095
 8096
 8097
 8098
 8099
 8100
(100 rows)

DROP TABLE t_zerocopy_ultrafast CASCADE;
-- ============================================================================
-- Test 13: Forward scan runtime key filtering (lines 2985-2992, 2996, 3001)
-- Zero-copy pages with runtime key filtering that rejects tuples
-- ============================================================================
DROP TABLE IF EXISTS t_runtime_filter CASCADE;
CREATE UNLOGGED TABLE t_runtime_filter (k int4, v int4);
INSERT INTO t_runtime_filter SELECT i, i*10 FROM generate_series(1, 5000) i;
CREATE INDEX t_runtime_filter_idx ON t_runtime_filter USING smol(k) INCLUDE (v);
ANALYZE t_runtime_filter;
-- Prepared statement with runtime keys
PREPARE runtime_stmt AS
    SELECT k, v FROM t_runtime_filter WHERE k >= $1 AND k <= $2 ORDER BY k;
EXECUTE runtime_stmt(1000, 2000);
  k   |   v   
------+-------
 1000 | 10000
 1001 | 10010
 1002 | 10020
 1003 | 10030
 1004 | 10040
 1005 | 10050
 1006 | 10060
 1007 | 10070
 1008 | 10080
 1009 | 10090
 1010 | 10100
 1011 | 10110
 1012 | 10120
 1013 | 10130
 1014 | 10140
 1015 | 10150
 1016 | 10160
 1017 | 10170
 1018 | 10180
 1019 | 10190
 1020 | 10200
 1021 | 10210
 1022 | 10220
 1023 | 10230
 1024 | 10240
 1025 | 10250
 1026 | 10260
 1027 | 10270
 1028 | 10280
 1029 | 10290
 1030 | 10300
 1031 | 10310
 1032 | 10320
 1033 | 10330
 1034 | 10340
 1035 | 10350
 1036 | 10360
 1037 | 10370
 1038 | 10380
 1039 | 10390
 1040 | 10400
 1041 | 10410
 1042 | 10420
 1043 | 10430
 1044 | 10440
 1045 | 10450
 1046 | 10460
 1047 | 10470
 1048 | 10480
 1049 | 10490
 1050 | 10500
 1051 | 10510
 1052 | 10520
 1053 | 10530
 1054 | 10540
 1055 | 10550
 1056 | 10560
 1057 | 10570
 1058 | 10580
 1059 | 10590
 1060 | 10600
 1061 | 10610
 1062 | 10620
 1063 | 10630
 1064 | 10640
 1065 | 10650
 1066 | 10660
 1067 | 10670
 1068 | 10680
 1069 | 10690
 1070 | 10700
 1071 | 10710
 1072 | 10720
 1073 | 10730
 1074 | 10740
 1075 | 10750
 1076 | 10760
 1077 | 10770
 1078 | 10780
 1079 | 10790
 1080 | 10800
 1081 | 10810
 1082 | 10820
 1083 | 10830
 1084 | 10840
 1085 | 10850
 1086 | 10860
 1087 | 10870
 1088 | 10880
 1089 | 10890
 1090 | 10900
 1091 | 10910
 1092 | 10920
 1093 | 10930
 1094 | 10940
 1095 | 10950
 1096 | 10960
 1097 | 10970
 1098 | 10980
 1099 | 10990
 1100 | 11000
 1101 | 11010
 1102 | 11020
 1103 | 11030
 1104 | 11040
 1105 | 11050
 1106 | 11060
 1107 | 11070
 1108 | 11080
 1109 | 11090
 1110 | 11100
 1111 | 11110
 1112 | 11120
 1113 | 11130
 1114 | 11140
 1115 | 11150
 1116 | 11160
 1117 | 11170
 1118 | 11180
 1119 | 11190
 1120 | 11200
 1121 | 11210
 1122 | 11220
 1123 | 11230
 1124 | 11240
 1125 | 11250
 1126 | 11260
 1127 | 11270
 1128 | 11280
 1129 | 11290
 1130 | 11300
 1131 | 11310
 1132 | 11320
 1133 | 11330
 1134 | 11340
 1135 | 11350
 1136 | 11360
 1137 | 11370
 1138 | 11380
 1139 | 11390
 1140 | 11400
 1141 | 11410
 1142 | 11420
 1143 | 11430
 1144 | 11440
 1145 | 11450
 1146 | 11460
 1147 | 11470
 1148 | 11480
 1149 | 11490
 1150 | 11500
 1151 | 11510
 1152 | 11520
 1153 | 11530
 1154 | 11540
 1155 | 11550
 1156 | 11560
 1157 | 11570
 1158 | 11580
 1159 | 11590
 1160 | 11600
 1161 | 11610
 1162 | 11620
 1163 | 11630
 1164 | 11640
 1165 | 11650
 1166 | 11660
 1167 | 11670
 1168 | 11680
 1169 | 11690
 1170 | 11700
 1171 | 11710
 1172 | 11720
 1173 | 11730
 1174 | 11740
 1175 | 11750
 1176 | 11760
 1177 | 11770
 1178 | 11780
 1179 | 11790
 1180 | 11800
 1181 | 11810
 1182 | 11820
 1183 | 11830
 1184 | 11840
 1185 | 11850
 1186 | 11860
 1187 | 11870
 1188 | 11880
 1189 | 11890
 1190 | 11900
 1191 | 11910
 1192 | 11920
 1193 | 11930
 1194 | 11940
 1195 | 11950
 1196 | 11960
 1197 | 11970
 1198 | 11980
 1199 | 11990
 1200 | 12000
 1201 | 12010
 1202 | 12020
 1203 | 12030
 1204 | 12040
 1205 | 12050
 1206 | 12060
 1207 | 12070
 1208 | 12080
 1209 | 12090
 1210 | 12100
 1211 | 12110
 1212 | 12120
 1213 | 12130
 1214 | 12140
 1215 | 12150
 1216 | 12160
 1217 | 12170
 1218 | 12180
 1219 | 12190
 1220 | 12200
 1221 | 12210
 1222 | 12220
 1223 | 12230
 1224 | 12240
 1225 | 12250
 1226 | 12260
 1227 | 12270
 1228 | 12280
 1229 | 12290
 1230 | 12300
 1231 | 12310
 1232 | 12320
 1233 | 12330
 1234 | 12340
 1235 | 12350
 1236 | 12360
 1237 | 12370
 1238 | 12380
 1239 | 12390
 1240 | 12400
 1241 | 12410
 1242 | 12420
 1243 | 12430
 1244 | 12440
 1245 | 12450
 1246 | 12460
 1247 | 12470
 1248 | 12480
 1249 | 12490
 1250 | 12500
 1251 | 12510
 1252 | 12520
 1253 | 12530
 1254 | 12540
 1255 | 12550
 1256 | 12560
 1257 | 12570
 1258 | 12580
 1259 | 12590
 1260 | 12600
 1261 | 12610
 1262 | 12620
 1263 | 12630
 1264 | 12640
 1265 | 12650
 1266 | 12660
 1267 | 12670
 1268 | 12680
 1269 | 12690
 1270 | 12700
 1271 | 12710
 1272 | 12720
 1273 | 12730
 1274 | 12740
 1275 | 12750
 1276 | 12760
 1277 | 12770
 1278 | 12780
 1279 | 12790
 1280 | 12800
 1281 | 12810
 1282 | 12820
 1283 | 12830
 1284 | 12840
 1285 | 12850
 1286 | 12860
 1287 | 12870
 1288 | 12880
 1289 | 12890
 1290 | 12900
 1291 | 12910
 1292 | 12920
 1293 | 12930
 1294 | 12940
 1295 | 12950
 1296 | 12960
 1297 | 12970
 1298 | 12980
 1299 | 12990
 1300 | 13000
 1301 | 13010
 1302 | 13020
 1303 | 13030
 1304 | 13040
 1305 | 13050
 1306 | 13060
 1307 | 13070
 1308 | 13080
 1309 | 13090
 1310 | 13100
 1311 | 13110
 1312 | 13120
 1313 | 13130
 1314 | 13140
 1315 | 13150
 1316 | 13160
 1317 | 13170
 1318 | 13180
 1319 | 13190
 1320 | 13200
 1321 | 13210
 1322 | 13220
 1323 | 13230
 1324 | 13240
 1325 | 13250
 1326 | 13260
 1327 | 13270
 1328 | 13280
 1329 | 13290
 1330 | 13300
 1331 | 13310
 1332 | 13320
 1333 | 13330
 1334 | 13340
 1335 | 13350
 1336 | 13360
 1337 | 13370
 1338 | 13380
 1339 | 13390
 1340 | 13400
 1341 | 13410
 1342 | 13420
 1343 | 13430
 1344 | 13440
 1345 | 13450
 1346 | 13460
 1347 | 13470
 1348 | 13480
 1349 | 13490
 1350 | 13500
 1351 | 13510
 1352 | 13520
 1353 | 13530
 1354 | 13540
 1355 | 13550
 1356 | 13560
 1357 | 13570
 1358 | 13580
 1359 | 13590
 1360 | 13600
 1361 | 13610
 1362 | 13620
 1363 | 13630
 1364 | 13640
 1365 | 13650
 1366 | 13660
 1367 | 13670
 1368 | 13680
 1369 | 13690
 1370 | 13700
 1371 | 13710
 1372 | 13720
 1373 | 13730
 1374 | 13740
 1375 | 13750
 1376 | 13760
 1377 | 13770
 1378 | 13780
 1379 | 13790
 1380 | 13800
 1381 | 13810
 1382 | 13820
 1383 | 13830
 1384 | 13840
 1385 | 13850
 1386 | 13860
 1387 | 13870
 1388 | 13880
 1389 | 13890
 1390 | 13900
 1391 | 13910
 1392 | 13920
 1393 | 13930
 1394 | 13940
 1395 | 13950
 1396 | 13960
 1397 | 13970
 1398 | 13980
 1399 | 13990
 1400 | 14000
 1401 | 14010
 1402 | 14020
 1403 | 14030
 1404 | 14040
 1405 | 14050
 1406 | 14060
 1407 | 14070
 1408 | 14080
 1409 | 14090
 1410 | 14100
 1411 | 14110
 1412 | 14120
 1413 | 14130
 1414 | 14140
 1415 | 14150
 1416 | 14160
 1417 | 14170
 1418 | 14180
 1419 | 14190
 1420 | 14200
 1421 | 14210
 1422 | 14220
 1423 | 14230
 1424 | 14240
 1425 | 14250
 1426 | 14260
 1427 | 14270
 1428 | 14280
 1429 | 14290
 1430 | 14300
 1431 | 14310
 1432 | 14320
 1433 | 14330
 1434 | 14340
 1435 | 14350
 1436 | 14360
 1437 | 14370
 1438 | 14380
 1439 | 14390
 1440 | 14400
 1441 | 14410
 1442 | 14420
 1443 | 14430
 1444 | 14440
 1445 | 14450
 1446 | 14460
 1447 | 14470
 1448 | 14480
 1449 | 14490
 1450 | 14500
 1451 | 14510
 1452 | 14520
 1453 | 14530
 1454 | 14540
 1455 | 14550
 1456 | 14560
 1457 | 14570
 1458 | 14580
 1459 | 14590
 1460 | 14600
 1461 | 14610
 1462 | 14620
 1463 | 14630
 1464 | 14640
 1465 | 14650
 1466 | 14660
 1467 | 14670
 1468 | 14680
 1469 | 14690
 1470 | 14700
 1471 | 14710
 1472 | 14720
 1473 | 14730
 1474 | 14740
 1475 | 14750
 1476 | 14760
 1477 | 14770
 1478 | 14780
 1479 | 14790
 1480 | 14800
 1481 | 14810
 1482 | 14820
 1483 | 14830
 1484 | 14840
 1485 | 14850
 1486 | 14860
 1487 | 14870
 1488 | 14880
 1489 | 14890
 1490 | 14900
 1491 | 14910
 1492 | 14920
 1493 | 14930
 1494 | 14940
 1495 | 14950
 1496 | 14960
 1497 | 14970
 1498 | 14980
 1499 | 14990
 1500 | 15000
 1501 | 15010
 1502 | 15020
 1503 | 15030
 1504 | 15040
 1505 | 15050
 1506 | 15060
 1507 | 15070
 1508 | 15080
 1509 | 15090
 1510 | 15100
 1511 | 15110
 1512 | 15120
 1513 | 15130
 1514 | 15140
 1515 | 15150
 1516 | 15160
 1517 | 15170
 1518 | 15180
 1519 | 15190
 1520 | 15200
 1521 | 15210
 1522 | 15220
 1523 | 15230
 1524 | 15240
 1525 | 15250
 1526 | 15260
 1527 | 15270
 1528 | 15280
 1529 | 15290
 1530 | 15300
 1531 | 15310
 1532 | 15320
 1533 | 15330
 1534 | 15340
 1535 | 15350
 1536 | 15360
 1537 | 15370
 1538 | 15380
 1539 | 15390
 1540 | 15400
 1541 | 15410
 1542 | 15420
 1543 | 15430
 1544 | 15440
 1545 | 15450
 1546 | 15460
 1547 | 15470
 1548 | 15480
 1549 | 15490
 1550 | 15500
 1551 | 15510
 1552 | 15520
 1553 | 15530
 1554 | 15540
 1555 | 15550
 1556 | 15560
 1557 | 15570
 1558 | 15580
 1559 | 15590
 1560 | 15600
 1561 | 15610
 1562 | 15620
 1563 | 15630
 1564 | 15640
 1565 | 15650
 1566 | 15660
 1567 | 15670
 1568 | 15680
 1569 | 15690
 1570 | 15700
 1571 | 15710
 1572 | 15720
 1573 | 15730
 1574 | 15740
 1575 | 15750
 1576 | 15760
 1577 | 15770
 1578 | 15780
 1579 | 15790
 1580 | 15800
 1581 | 15810
 1582 | 15820
 1583 | 15830
 1584 | 15840
 1585 | 15850
 1586 | 15860
 1587 | 15870
 1588 | 15880
 1589 | 15890
 1590 | 15900
 1591 | 15910
 1592 | 15920
 1593 | 15930
 1594 | 15940
 1595 | 15950
 1596 | 15960
 1597 | 15970
 1598 | 15980
 1599 | 15990
 1600 | 16000
 1601 | 16010
 1602 | 16020
 1603 | 16030
 1604 | 16040
 1605 | 16050
 1606 | 16060
 1607 | 16070
 1608 | 16080
 1609 | 16090
 1610 | 16100
 1611 | 16110
 1612 | 16120
 1613 | 16130
 1614 | 16140
 1615 | 16150
 1616 | 16160
 1617 | 16170
 1618 | 16180
 1619 | 16190
 1620 | 16200
 1621 | 16210
 1622 | 16220
 1623 | 16230
 1624 | 16240
 1625 | 16250
 1626 | 16260
 1627 | 16270
 1628 | 16280
 1629 | 16290
 1630 | 16300
 1631 | 16310
 1632 | 16320
 1633 | 16330
 1634 | 16340
 1635 | 16350
 1636 | 16360
 1637 | 16370
 1638 | 16380
 1639 | 16390
 1640 | 16400
 1641 | 16410
 1642 | 16420
 1643 | 16430
 1644 | 16440
 1645 | 16450
 1646 | 16460
 1647 | 16470
 1648 | 16480
 1649 | 16490
 1650 | 16500
 1651 | 16510
 1652 | 16520
 1653 | 16530
 1654 | 16540
 1655 | 16550
 1656 | 16560
 1657 | 16570
 1658 | 16580
 1659 | 16590
 1660 | 16600
 1661 | 16610
 1662 | 16620
 1663 | 16630
 1664 | 16640
 1665 | 16650
 1666 | 16660
 1667 | 16670
 1668 | 16680
 1669 | 16690
 1670 | 16700
 1671 | 16710
 1672 | 16720
 1673 | 16730
 1674 | 16740
 1675 | 16750
 1676 | 16760
 1677 | 16770
 1678 | 16780
 1679 | 16790
 1680 | 16800
 1681 | 16810
 1682 | 16820
 1683 | 16830
 1684 | 16840
 1685 | 16850
 1686 | 16860
 1687 | 16870
 1688 | 16880
 1689 | 16890
 1690 | 16900
 1691 | 16910
 1692 | 16920
 1693 | 16930
 1694 | 16940
 1695 | 16950
 1696 | 16960
 1697 | 16970
 1698 | 16980
 1699 | 16990
 1700 | 17000
 1701 | 17010
 1702 | 17020
 1703 | 17030
 1704 | 17040
 1705 | 17050
 1706 | 17060
 1707 | 17070
 1708 | 17080
 1709 | 17090
 1710 | 17100
 1711 | 17110
 1712 | 17120
 1713 | 17130
 1714 | 17140
 1715 | 17150
 1716 | 17160
 1717 | 17170
 1718 | 17180
 1719 | 17190
 1720 | 17200
 1721 | 17210
 1722 | 17220
 1723 | 17230
 1724 | 17240
 1725 | 17250
 1726 | 17260
 1727 | 17270
 1728 | 17280
 1729 | 17290
 1730 | 17300
 1731 | 17310
 1732 | 17320
 1733 | 17330
 1734 | 17340
 1735 | 17350
 1736 | 17360
 1737 | 17370
 1738 | 17380
 1739 | 17390
 1740 | 17400
 1741 | 17410
 1742 | 17420
 1743 | 17430
 1744 | 17440
 1745 | 17450
 1746 | 17460
 1747 | 17470
 1748 | 17480
 1749 | 17490
 1750 | 17500
 1751 | 17510
 1752 | 17520
 1753 | 17530
 1754 | 17540
 1755 | 17550
 1756 | 17560
 1757 | 17570
 1758 | 17580
 1759 | 17590
 1760 | 17600
 1761 | 17610
 1762 | 17620
 1763 | 17630
 1764 | 17640
 1765 | 17650
 1766 | 17660
 1767 | 17670
 1768 | 17680
 1769 | 17690
 1770 | 17700
 1771 | 17710
 1772 | 17720
 1773 | 17730
 1774 | 17740
 1775 | 17750
 1776 | 17760
 1777 | 17770
 1778 | 17780
 1779 | 17790
 1780 | 17800
 1781 | 17810
 1782 | 17820
 1783 | 17830
 1784 | 17840
 1785 | 17850
 1786 | 17860
 1787 | 17870
 1788 | 17880
 1789 | 17890
 1790 | 17900
 1791 | 17910
 1792 | 17920
 1793 | 17930
 1794 | 17940
 1795 | 17950
 1796 | 17960
 1797 | 17970
 1798 | 17980
 1799 | 17990
 1800 | 18000
 1801 | 18010
 1802 | 18020
 1803 | 18030
 1804 | 18040
 1805 | 18050
 1806 | 18060
 1807 | 18070
 1808 | 18080
 1809 | 18090
 1810 | 18100
 1811 | 18110
 1812 | 18120
 1813 | 18130
 1814 | 18140
 1815 | 18150
 1816 | 18160
 1817 | 18170
 1818 | 18180
 1819 | 18190
 1820 | 18200
 1821 | 18210
 1822 | 18220
 1823 | 18230
 1824 | 18240
 1825 | 18250
 1826 | 18260
 1827 | 18270
 1828 | 18280
 1829 | 18290
 1830 | 18300
 1831 | 18310
 1832 | 18320
 1833 | 18330
 1834 | 18340
 1835 | 18350
 1836 | 18360
 1837 | 18370
 1838 | 18380
 1839 | 18390
 1840 | 18400
 1841 | 18410
 1842 | 18420
 1843 | 18430
 1844 | 18440
 1845 | 18450
 1846 | 18460
 1847 | 18470
 1848 | 18480
 1849 | 18490
 1850 | 18500
 1851 | 18510
 1852 | 18520
 1853 | 18530
 1854 | 18540
 1855 | 18550
 1856 | 18560
 1857 | 18570
 1858 | 18580
 1859 | 18590
 1860 | 18600
 1861 | 18610
 1862 | 18620
 1863 | 18630
 1864 | 18640
 1865 | 18650
 1866 | 18660
 1867 | 18670
 1868 | 18680
 1869 | 18690
 1870 | 18700
 1871 | 18710
 1872 | 18720
 1873 | 18730
 1874 | 18740
 1875 | 18750
 1876 | 18760
 1877 | 18770
 1878 | 18780
 1879 | 18790
 1880 | 18800
 1881 | 18810
 1882 | 18820
 1883 | 18830
 1884 | 18840
 1885 | 18850
 1886 | 18860
 1887 | 18870
 1888 | 18880
 1889 | 18890
 1890 | 18900
 1891 | 18910
 1892 | 18920
 1893 | 18930
 1894 | 18940
 1895 | 18950
 1896 | 18960
 1897 | 18970
 1898 | 18980
 1899 | 18990
 1900 | 19000
 1901 | 19010
 1902 | 19020
 1903 | 19030
 1904 | 19040
 1905 | 19050
 1906 | 19060
 1907 | 19070
 1908 | 19080
 1909 | 19090
 1910 | 19100
 1911 | 19110
 1912 | 19120
 1913 | 19130
 1914 | 19140
 1915 | 19150
 1916 | 19160
 1917 | 19170
 1918 | 19180
 1919 | 19190
 1920 | 19200
 1921 | 19210
 1922 | 19220
 1923 | 19230
 1924 | 19240
 1925 | 19250
 1926 | 19260
 1927 | 19270
 1928 | 19280
 1929 | 19290
 1930 | 19300
 1931 | 19310
 1932 | 19320
 1933 | 19330
 1934 | 19340
 1935 | 19350
 1936 | 19360
 1937 | 19370
 1938 | 19380
 1939 | 19390
 1940 | 19400
 1941 | 19410
 1942 | 19420
 1943 | 19430
 1944 | 19440
 1945 | 19450
 1946 | 19460
 1947 | 19470
 1948 | 19480
 1949 | 19490
 1950 | 19500
 1951 | 19510
 1952 | 19520
 1953 | 19530
 1954 | 19540
 1955 | 19550
 1956 | 19560
 1957 | 19570
 1958 | 19580
 1959 | 19590
 1960 | 19600
 1961 | 19610
 1962 | 19620
 1963 | 19630
 1964 | 19640
 1965 | 19650
 1966 | 19660
 1967 | 19670
 1968 | 19680
 1969 | 19690
 1970 | 19700
 1971 | 19710
 1972 | 19720
 1973 | 19730
 1974 | 19740
 1975 | 19750
 1976 | 19760
 1977 | 19770
 1978 | 19780
 1979 | 19790
 1980 | 19800
 1981 | 19810
 1982 | 19820
 1983 | 19830
 1984 | 19840
 1985 | 19850
 1986 | 19860
 1987 | 19870
 1988 | 19880
 1989 | 19890
 1990 | 19900
 1991 | 19910
 1992 | 19920
 1993 | 19930
 1994 | 19940
 1995 | 19950
 1996 | 19960
 1997 | 19970
 1998 | 19980
 1999 | 19990
 2000 | 20000
(1001 rows)

EXECUTE runtime_stmt(3000, 4000);
  k   |   v   
------+-------
 3000 | 30000
 3001 | 30010
 3002 | 30020
 3003 | 30030
 3004 | 30040
 3005 | 30050
 3006 | 30060
 3007 | 30070
 3008 | 30080
 3009 | 30090
 3010 | 30100
 3011 | 30110
 3012 | 30120
 3013 | 30130
 3014 | 30140
 3015 | 30150
 3016 | 30160
 3017 | 30170
 3018 | 30180
 3019 | 30190
 3020 | 30200
 3021 | 30210
 3022 | 30220
 3023 | 30230
 3024 | 30240
 3025 | 30250
 3026 | 30260
 3027 | 30270
 3028 | 30280
 3029 | 30290
 3030 | 30300
 3031 | 30310
 3032 | 30320
 3033 | 30330
 3034 | 30340
 3035 | 30350
 3036 | 30360
 3037 | 30370
 3038 | 30380
 3039 | 30390
 3040 | 30400
 3041 | 30410
 3042 | 30420
 3043 | 30430
 3044 | 30440
 3045 | 30450
 3046 | 30460
 3047 | 30470
 3048 | 30480
 3049 | 30490
 3050 | 30500
 3051 | 30510
 3052 | 30520
 3053 | 30530
 3054 | 30540
 3055 | 30550
 3056 | 30560
 3057 | 30570
 3058 | 30580
 3059 | 30590
 3060 | 30600
 3061 | 30610
 3062 | 30620
 3063 | 30630
 3064 | 30640
 3065 | 30650
 3066 | 30660
 3067 | 30670
 3068 | 30680
 3069 | 30690
 3070 | 30700
 3071 | 30710
 3072 | 30720
 3073 | 30730
 3074 | 30740
 3075 | 30750
 3076 | 30760
 3077 | 30770
 3078 | 30780
 3079 | 30790
 3080 | 30800
 3081 | 30810
 3082 | 30820
 3083 | 30830
 3084 | 30840
 3085 | 30850
 3086 | 30860
 3087 | 30870
 3088 | 30880
 3089 | 30890
 3090 | 30900
 3091 | 30910
 3092 | 30920
 3093 | 30930
 3094 | 30940
 3095 | 30950
 3096 | 30960
 3097 | 30970
 3098 | 30980
 3099 | 30990
 3100 | 31000
 3101 | 31010
 3102 | 31020
 3103 | 31030
 3104 | 31040
 3105 | 31050
 3106 | 31060
 3107 | 31070
 3108 | 31080
 3109 | 31090
 3110 | 31100
 3111 | 31110
 3112 | 31120
 3113 | 31130
 3114 | 31140
 3115 | 31150
 3116 | 31160
 3117 | 31170
 3118 | 31180
 3119 | 31190
 3120 | 31200
 3121 | 31210
 3122 | 31220
 3123 | 31230
 3124 | 31240
 3125 | 31250
 3126 | 31260
 3127 | 31270
 3128 | 31280
 3129 | 31290
 3130 | 31300
 3131 | 31310
 3132 | 31320
 3133 | 31330
 3134 | 31340
 3135 | 31350
 3136 | 31360
 3137 | 31370
 3138 | 31380
 3139 | 31390
 3140 | 31400
 3141 | 31410
 3142 | 31420
 3143 | 31430
 3144 | 31440
 3145 | 31450
 3146 | 31460
 3147 | 31470
 3148 | 31480
 3149 | 31490
 3150 | 31500
 3151 | 31510
 3152 | 31520
 3153 | 31530
 3154 | 31540
 3155 | 31550
 3156 | 31560
 3157 | 31570
 3158 | 31580
 3159 | 31590
 3160 | 31600
 3161 | 31610
 3162 | 31620
 3163 | 31630
 3164 | 31640
 3165 | 31650
 3166 | 31660
 3167 | 31670
 3168 | 31680
 3169 | 31690
 3170 | 31700
 3171 | 31710
 3172 | 31720
 3173 | 31730
 3174 | 31740
 3175 | 31750
 3176 | 31760
 3177 | 31770
 3178 | 31780
 3179 | 31790
 3180 | 31800
 3181 | 31810
 3182 | 31820
 3183 | 31830
 3184 | 31840
 3185 | 31850
 3186 | 31860
 3187 | 31870
 3188 | 31880
 3189 | 31890
 3190 | 31900
 3191 | 31910
 3192 | 31920
 3193 | 31930
 3194 | 31940
 3195 | 31950
 3196 | 31960
 3197 | 31970
 3198 | 31980
 3199 | 31990
 3200 | 32000
 3201 | 32010
 3202 | 32020
 3203 | 32030
 3204 | 32040
 3205 | 32050
 3206 | 32060
 3207 | 32070
 3208 | 32080
 3209 | 32090
 3210 | 32100
 3211 | 32110
 3212 | 32120
 3213 | 32130
 3214 | 32140
 3215 | 32150
 3216 | 32160
 3217 | 32170
 3218 | 32180
 3219 | 32190
 3220 | 32200
 3221 | 32210
 3222 | 32220
 3223 | 32230
 3224 | 32240
 3225 | 32250
 3226 | 32260
 3227 | 32270
 3228 | 32280
 3229 | 32290
 3230 | 32300
 3231 | 32310
 3232 | 32320
 3233 | 32330
 3234 | 32340
 3235 | 32350
 3236 | 32360
 3237 | 32370
 3238 | 32380
 3239 | 32390
 3240 | 32400
 3241 | 32410
 3242 | 32420
 3243 | 32430
 3244 | 32440
 3245 | 32450
 3246 | 32460
 3247 | 32470
 3248 | 32480
 3249 | 32490
 3250 | 32500
 3251 | 32510
 3252 | 32520
 3253 | 32530
 3254 | 32540
 3255 | 32550
 3256 | 32560
 3257 | 32570
 3258 | 32580
 3259 | 32590
 3260 | 32600
 3261 | 32610
 3262 | 32620
 3263 | 32630
 3264 | 32640
 3265 | 32650
 3266 | 32660
 3267 | 32670
 3268 | 32680
 3269 | 32690
 3270 | 32700
 3271 | 32710
 3272 | 32720
 3273 | 32730
 3274 | 32740
 3275 | 32750
 3276 | 32760
 3277 | 32770
 3278 | 32780
 3279 | 32790
 3280 | 32800
 3281 | 32810
 3282 | 32820
 3283 | 32830
 3284 | 32840
 3285 | 32850
 3286 | 32860
 3287 | 32870
 3288 | 32880
 3289 | 32890
 3290 | 32900
 3291 | 32910
 3292 | 32920
 3293 | 32930
 3294 | 32940
 3295 | 32950
 3296 | 32960
 3297 | 32970
 3298 | 32980
 3299 | 32990
 3300 | 33000
 3301 | 33010
 3302 | 33020
 3303 | 33030
 3304 | 33040
 3305 | 33050
 3306 | 33060
 3307 | 33070
 3308 | 33080
 3309 | 33090
 3310 | 33100
 3311 | 33110
 3312 | 33120
 3313 | 33130
 3314 | 33140
 3315 | 33150
 3316 | 33160
 3317 | 33170
 3318 | 33180
 3319 | 33190
 3320 | 33200
 3321 | 33210
 3322 | 33220
 3323 | 33230
 3324 | 33240
 3325 | 33250
 3326 | 33260
 3327 | 33270
 3328 | 33280
 3329 | 33290
 3330 | 33300
 3331 | 33310
 3332 | 33320
 3333 | 33330
 3334 | 33340
 3335 | 33350
 3336 | 33360
 3337 | 33370
 3338 | 33380
 3339 | 33390
 3340 | 33400
 3341 | 33410
 3342 | 33420
 3343 | 33430
 3344 | 33440
 3345 | 33450
 3346 | 33460
 3347 | 33470
 3348 | 33480
 3349 | 33490
 3350 | 33500
 3351 | 33510
 3352 | 33520
 3353 | 33530
 3354 | 33540
 3355 | 33550
 3356 | 33560
 3357 | 33570
 3358 | 33580
 3359 | 33590
 3360 | 33600
 3361 | 33610
 3362 | 33620
 3363 | 33630
 3364 | 33640
 3365 | 33650
 3366 | 33660
 3367 | 33670
 3368 | 33680
 3369 | 33690
 3370 | 33700
 3371 | 33710
 3372 | 33720
 3373 | 33730
 3374 | 33740
 3375 | 33750
 3376 | 33760
 3377 | 33770
 3378 | 33780
 3379 | 33790
 3380 | 33800
 3381 | 33810
 3382 | 33820
 3383 | 33830
 3384 | 33840
 3385 | 33850
 3386 | 33860
 3387 | 33870
 3388 | 33880
 3389 | 33890
 3390 | 33900
 3391 | 33910
 3392 | 33920
 3393 | 33930
 3394 | 33940
 3395 | 33950
 3396 | 33960
 3397 | 33970
 3398 | 33980
 3399 | 33990
 3400 | 34000
 3401 | 34010
 3402 | 34020
 3403 | 34030
 3404 | 34040
 3405 | 34050
 3406 | 34060
 3407 | 34070
 3408 | 34080
 3409 | 34090
 3410 | 34100
 3411 | 34110
 3412 | 34120
 3413 | 34130
 3414 | 34140
 3415 | 34150
 3416 | 34160
 3417 | 34170
 3418 | 34180
 3419 | 34190
 3420 | 34200
 3421 | 34210
 3422 | 34220
 3423 | 34230
 3424 | 34240
 3425 | 34250
 3426 | 34260
 3427 | 34270
 3428 | 34280
 3429 | 34290
 3430 | 34300
 3431 | 34310
 3432 | 34320
 3433 | 34330
 3434 | 34340
 3435 | 34350
 3436 | 34360
 3437 | 34370
 3438 | 34380
 3439 | 34390
 3440 | 34400
 3441 | 34410
 3442 | 34420
 3443 | 34430
 3444 | 34440
 3445 | 34450
 3446 | 34460
 3447 | 34470
 3448 | 34480
 3449 | 34490
 3450 | 34500
 3451 | 34510
 3452 | 34520
 3453 | 34530
 3454 | 34540
 3455 | 34550
 3456 | 34560
 3457 | 34570
 3458 | 34580
 3459 | 34590
 3460 | 34600
 3461 | 34610
 3462 | 34620
 3463 | 34630
 3464 | 34640
 3465 | 34650
 3466 | 34660
 3467 | 34670
 3468 | 34680
 3469 | 34690
 3470 | 34700
 3471 | 34710
 3472 | 34720
 3473 | 34730
 3474 | 34740
 3475 | 34750
 3476 | 34760
 3477 | 34770
 3478 | 34780
 3479 | 34790
 3480 | 34800
 3481 | 34810
 3482 | 34820
 3483 | 34830
 3484 | 34840
 3485 | 34850
 3486 | 34860
 3487 | 34870
 3488 | 34880
 3489 | 34890
 3490 | 34900
 3491 | 34910
 3492 | 34920
 3493 | 34930
 3494 | 34940
 3495 | 34950
 3496 | 34960
 3497 | 34970
 3498 | 34980
 3499 | 34990
 3500 | 35000
 3501 | 35010
 3502 | 35020
 3503 | 35030
 3504 | 35040
 3505 | 35050
 3506 | 35060
 3507 | 35070
 3508 | 35080
 3509 | 35090
 3510 | 35100
 3511 | 35110
 3512 | 35120
 3513 | 35130
 3514 | 35140
 3515 | 35150
 3516 | 35160
 3517 | 35170
 3518 | 35180
 3519 | 35190
 3520 | 35200
 3521 | 35210
 3522 | 35220
 3523 | 35230
 3524 | 35240
 3525 | 35250
 3526 | 35260
 3527 | 35270
 3528 | 35280
 3529 | 35290
 3530 | 35300
 3531 | 35310
 3532 | 35320
 3533 | 35330
 3534 | 35340
 3535 | 35350
 3536 | 35360
 3537 | 35370
 3538 | 35380
 3539 | 35390
 3540 | 35400
 3541 | 35410
 3542 | 35420
 3543 | 35430
 3544 | 35440
 3545 | 35450
 3546 | 35460
 3547 | 35470
 3548 | 35480
 3549 | 35490
 3550 | 35500
 3551 | 35510
 3552 | 35520
 3553 | 35530
 3554 | 35540
 3555 | 35550
 3556 | 35560
 3557 | 35570
 3558 | 35580
 3559 | 35590
 3560 | 35600
 3561 | 35610
 3562 | 35620
 3563 | 35630
 3564 | 35640
 3565 | 35650
 3566 | 35660
 3567 | 35670
 3568 | 35680
 3569 | 35690
 3570 | 35700
 3571 | 35710
 3572 | 35720
 3573 | 35730
 3574 | 35740
 3575 | 35750
 3576 | 35760
 3577 | 35770
 3578 | 35780
 3579 | 35790
 3580 | 35800
 3581 | 35810
 3582 | 35820
 3583 | 35830
 3584 | 35840
 3585 | 35850
 3586 | 35860
 3587 | 35870
 3588 | 35880
 3589 | 35890
 3590 | 35900
 3591 | 35910
 3592 | 35920
 3593 | 35930
 3594 | 35940
 3595 | 35950
 3596 | 35960
 3597 | 35970
 3598 | 35980
 3599 | 35990
 3600 | 36000
 3601 | 36010
 3602 | 36020
 3603 | 36030
 3604 | 36040
 3605 | 36050
 3606 | 36060
 3607 | 36070
 3608 | 36080
 3609 | 36090
 3610 | 36100
 3611 | 36110
 3612 | 36120
 3613 | 36130
 3614 | 36140
 3615 | 36150
 3616 | 36160
 3617 | 36170
 3618 | 36180
 3619 | 36190
 3620 | 36200
 3621 | 36210
 3622 | 36220
 3623 | 36230
 3624 | 36240
 3625 | 36250
 3626 | 36260
 3627 | 36270
 3628 | 36280
 3629 | 36290
 3630 | 36300
 3631 | 36310
 3632 | 36320
 3633 | 36330
 3634 | 36340
 3635 | 36350
 3636 | 36360
 3637 | 36370
 3638 | 36380
 3639 | 36390
 3640 | 36400
 3641 | 36410
 3642 | 36420
 3643 | 36430
 3644 | 36440
 3645 | 36450
 3646 | 36460
 3647 | 36470
 3648 | 36480
 3649 | 36490
 3650 | 36500
 3651 | 36510
 3652 | 36520
 3653 | 36530
 3654 | 36540
 3655 | 36550
 3656 | 36560
 3657 | 36570
 3658 | 36580
 3659 | 36590
 3660 | 36600
 3661 | 36610
 3662 | 36620
 3663 | 36630
 3664 | 36640
 3665 | 36650
 3666 | 36660
 3667 | 36670
 3668 | 36680
 3669 | 36690
 3670 | 36700
 3671 | 36710
 3672 | 36720
 3673 | 36730
 3674 | 36740
 3675 | 36750
 3676 | 36760
 3677 | 36770
 3678 | 36780
 3679 | 36790
 3680 | 36800
 3681 | 36810
 3682 | 36820
 3683 | 36830
 3684 | 36840
 3685 | 36850
 3686 | 36860
 3687 | 36870
 3688 | 36880
 3689 | 36890
 3690 | 36900
 3691 | 36910
 3692 | 36920
 3693 | 36930
 3694 | 36940
 3695 | 36950
 3696 | 36960
 3697 | 36970
 3698 | 36980
 3699 | 36990
 3700 | 37000
 3701 | 37010
 3702 | 37020
 3703 | 37030
 3704 | 37040
 3705 | 37050
 3706 | 37060
 3707 | 37070
 3708 | 37080
 3709 | 37090
 3710 | 37100
 3711 | 37110
 3712 | 37120
 3713 | 37130
 3714 | 37140
 3715 | 37150
 3716 | 37160
 3717 | 37170
 3718 | 37180
 3719 | 37190
 3720 | 37200
 3721 | 37210
 3722 | 37220
 3723 | 37230
 3724 | 37240
 3725 | 37250
 3726 | 37260
 3727 | 37270
 3728 | 37280
 3729 | 37290
 3730 | 37300
 3731 | 37310
 3732 | 37320
 3733 | 37330
 3734 | 37340
 3735 | 37350
 3736 | 37360
 3737 | 37370
 3738 | 37380
 3739 | 37390
 3740 | 37400
 3741 | 37410
 3742 | 37420
 3743 | 37430
 3744 | 37440
 3745 | 37450
 3746 | 37460
 3747 | 37470
 3748 | 37480
 3749 | 37490
 3750 | 37500
 3751 | 37510
 3752 | 37520
 3753 | 37530
 3754 | 37540
 3755 | 37550
 3756 | 37560
 3757 | 37570
 3758 | 37580
 3759 | 37590
 3760 | 37600
 3761 | 37610
 3762 | 37620
 3763 | 37630
 3764 | 37640
 3765 | 37650
 3766 | 37660
 3767 | 37670
 3768 | 37680
 3769 | 37690
 3770 | 37700
 3771 | 37710
 3772 | 37720
 3773 | 37730
 3774 | 37740
 3775 | 37750
 3776 | 37760
 3777 | 37770
 3778 | 37780
 3779 | 37790
 3780 | 37800
 3781 | 37810
 3782 | 37820
 3783 | 37830
 3784 | 37840
 3785 | 37850
 3786 | 37860
 3787 | 37870
 3788 | 37880
 3789 | 37890
 3790 | 37900
 3791 | 37910
 3792 | 37920
 3793 | 37930
 3794 | 37940
 3795 | 37950
 3796 | 37960
 3797 | 37970
 3798 | 37980
 3799 | 37990
 3800 | 38000
 3801 | 38010
 3802 | 38020
 3803 | 38030
 3804 | 38040
 3805 | 38050
 3806 | 38060
 3807 | 38070
 3808 | 38080
 3809 | 38090
 3810 | 38100
 3811 | 38110
 3812 | 38120
 3813 | 38130
 3814 | 38140
 3815 | 38150
 3816 | 38160
 3817 | 38170
 3818 | 38180
 3819 | 38190
 3820 | 38200
 3821 | 38210
 3822 | 38220
 3823 | 38230
 3824 | 38240
 3825 | 38250
 3826 | 38260
 3827 | 38270
 3828 | 38280
 3829 | 38290
 3830 | 38300
 3831 | 38310
 3832 | 38320
 3833 | 38330
 3834 | 38340
 3835 | 38350
 3836 | 38360
 3837 | 38370
 3838 | 38380
 3839 | 38390
 3840 | 38400
 3841 | 38410
 3842 | 38420
 3843 | 38430
 3844 | 38440
 3845 | 38450
 3846 | 38460
 3847 | 38470
 3848 | 38480
 3849 | 38490
 3850 | 38500
 3851 | 38510
 3852 | 38520
 3853 | 38530
 3854 | 38540
 3855 | 38550
 3856 | 38560
 3857 | 38570
 3858 | 38580
 3859 | 38590
 3860 | 38600
 3861 | 38610
 3862 | 38620
 3863 | 38630
 3864 | 38640
 3865 | 38650
 3866 | 38660
 3867 | 38670
 3868 | 38680
 3869 | 38690
 3870 | 38700
 3871 | 38710
 3872 | 38720
 3873 | 38730
 3874 | 38740
 3875 | 38750
 3876 | 38760
 3877 | 38770
 3878 | 38780
 3879 | 38790
 3880 | 38800
 3881 | 38810
 3882 | 38820
 3883 | 38830
 3884 | 38840
 3885 | 38850
 3886 | 38860
 3887 | 38870
 3888 | 38880
 3889 | 38890
 3890 | 38900
 3891 | 38910
 3892 | 38920
 3893 | 38930
 3894 | 38940
 3895 | 38950
 3896 | 38960
 3897 | 38970
 3898 | 38980
 3899 | 38990
 3900 | 39000
 3901 | 39010
 3902 | 39020
 3903 | 39030
 3904 | 39040
 3905 | 39050
 3906 | 39060
 3907 | 39070
 3908 | 39080
 3909 | 39090
 3910 | 39100
 3911 | 39110
 3912 | 39120
 3913 | 39130
 3914 | 39140
 3915 | 39150
 3916 | 39160
 3917 | 39170
 3918 | 39180
 3919 | 39190
 3920 | 39200
 3921 | 39210
 3922 | 39220
 3923 | 39230
 3924 | 39240
 3925 | 39250
 3926 | 39260
 3927 | 39270
 3928 | 39280
 3929 | 39290
 3930 | 39300
 3931 | 39310
 3932 | 39320
 3933 | 39330
 3934 | 39340
 3935 | 39350
 3936 | 39360
 3937 | 39370
 3938 | 39380
 3939 | 39390
 3940 | 39400
 3941 | 39410
 3942 | 39420
 3943 | 39430
 3944 | 39440
 3945 | 39450
 3946 | 39460
 3947 | 39470
 3948 | 39480
 3949 | 39490
 3950 | 39500
 3951 | 39510
 3952 | 39520
 3953 | 39530
 3954 | 39540
 3955 | 39550
 3956 | 39560
 3957 | 39570
 3958 | 39580
 3959 | 39590
 3960 | 39600
 3961 | 39610
 3962 | 39620
 3963 | 39630
 3964 | 39640
 3965 | 39650
 3966 | 39660
 3967 | 39670
 3968 | 39680
 3969 | 39690
 3970 | 39700
 3971 | 39710
 3972 | 39720
 3973 | 39730
 3974 | 39740
 3975 | 39750
 3976 | 39760
 3977 | 39770
 3978 | 39780
 3979 | 39790
 3980 | 39800
 3981 | 39810
 3982 | 39820
 3983 | 39830
 3984 | 39840
 3985 | 39850
 3986 | 39860
 3987 | 39870
 3988 | 39880
 3989 | 39890
 3990 | 39900
 3991 | 39910
 3992 | 39920
 3993 | 39930
 3994 | 39940
 3995 | 39950
 3996 | 39960
 3997 | 39970
 3998 | 39980
 3999 | 39990
 4000 | 40000
(1001 rows)

DEALLOCATE runtime_stmt;
DROP TABLE t_runtime_filter CASCADE;
-- ============================================================================
-- Test 14: Parallel scan with controlled fanout (parallel scan controlled fanout)
-- Force parallel scan and ensure it exhausts all pages
-- ============================================================================
DROP TABLE IF EXISTS t_parallel_complete CASCADE;
CREATE UNLOGGED TABLE t_parallel_complete (k int4);
INSERT INTO t_parallel_complete SELECT i FROM generate_series(1, 100000) i;
CREATE INDEX t_parallel_complete_idx ON t_parallel_complete USING smol(k);
ANALYZE t_parallel_complete;
-- Force parallel scan
SET max_parallel_workers_per_gather = 4;
SET parallel_setup_cost = 0;
SET parallel_tuple_cost = 0;
SET min_parallel_index_scan_size = 0;
SET min_parallel_table_scan_size = 0;
-- Scan ALL rows to ensure parallel workers exhaust the index
SELECT count(*) FROM t_parallel_complete WHERE k >= 1;
 count  
--------
 100000
(1 row)

-- Reset
SET max_parallel_workers_per_gather = 0;
DROP TABLE t_parallel_complete CASCADE;
-- ============================================================================
-- Test 15: Parallel two-column scan with zero-copy (parallel two-column zero-copy scan)
-- Parallel scan on two-column index triggers different code paths
-- ============================================================================
DROP TABLE IF EXISTS t_parallel_twocol CASCADE;
CREATE UNLOGGED TABLE t_parallel_twocol (k1 int4, k2 int4, v int4);
INSERT INTO t_parallel_twocol SELECT i, i*2, i*10 FROM generate_series(1, 100000) i;
CREATE INDEX t_parallel_twocol_idx ON t_parallel_twocol USING smol(k1, k2) INCLUDE (v);
ANALYZE t_parallel_twocol;
SET max_parallel_workers_per_gather = 4;
SET parallel_setup_cost = 0;
SET parallel_tuple_cost = 0;
SET min_parallel_index_scan_size = 0;
-- Parallel two-column scan
SELECT count(*) FROM t_parallel_twocol WHERE k1 >= 10000;
 count 
-------
 90001
(1 row)

SELECT k1, k2, v FROM t_parallel_twocol WHERE k1 BETWEEN 50000 AND 50100 ORDER BY k1, k2 LIMIT 20;
  k1   |   k2   |   v    
-------+--------+--------
 50000 | 100000 | 500000
 50001 | 100002 | 500010
 50002 | 100004 | 500020
 50003 | 100006 | 500030
 50004 | 100008 | 500040
 50005 | 100010 | 500050
 50006 | 100012 | 500060
 50007 | 100014 | 500070
 50008 | 100016 | 500080
 50009 | 100018 | 500090
 50010 | 100020 | 500100
 50011 | 100022 | 500110
 50012 | 100024 | 500120
 50013 | 100026 | 500130
 50014 | 100028 | 500140
 50015 | 100030 | 500150
 50016 | 100032 | 500160
 50017 | 100034 | 500170
 50018 | 100036 | 500180
 50019 | 100038 | 500190
(20 rows)

SET max_parallel_workers_per_gather = 0;
DROP TABLE t_parallel_twocol CASCADE;
-- ============================================================================
-- Test 16: Text INCLUDE columns with various patterns (lines 2721-2725)
-- Text INCLUDE columns trigger varlena handling
-- ============================================================================
DROP TABLE IF EXISTS t_text_includes CASCADE;
CREATE UNLOGGED TABLE t_text_includes (k int4, t1 text, t2 text);
INSERT INTO t_text_includes
SELECT i, 'text_' || i, repeat('x', i % 100)
FROM generate_series(1, 1000) i;
CREATE INDEX t_text_includes_idx ON t_text_includes USING smol(k) INCLUDE (t1, t2);
ERROR:  smol text32 INCLUDE exceeds 32 bytes
ANALYZE t_text_includes;
-- Access text INCLUDE columns
SELECT k, t1, t2 FROM t_text_includes WHERE k >= 500 AND k <= 600 ORDER BY k LIMIT 10;
  k  |    t1    |    t2     
-----+----------+-----------
 500 | text_500 | 
 501 | text_501 | x
 502 | text_502 | xx
 503 | text_503 | xxx
 504 | text_504 | xxxx
 505 | text_505 | xxxxx
 506 | text_506 | xxxxxx
 507 | text_507 | xxxxxxx
 508 | text_508 | xxxxxxxx
 509 | text_509 | xxxxxxxxx
(10 rows)

DROP TABLE t_text_includes CASCADE;
-- ============================================================================
-- Test 17: Rescan in nested loop (lines 3392-3395)
-- Trigger index rescan with nested loop join
-- ============================================================================
DROP TABLE IF EXISTS t_rescan_inner CASCADE;
DROP TABLE IF EXISTS t_rescan_outer CASCADE;
CREATE UNLOGGED TABLE t_rescan_outer (k int4);
CREATE UNLOGGED TABLE t_rescan_inner (k int4, v int4);
INSERT INTO t_rescan_outer VALUES (100), (200), (300), (400), (500);
INSERT INTO t_rescan_inner SELECT i, i*10 FROM generate_series(1, 1000) i;
CREATE INDEX t_rescan_inner_idx ON t_rescan_inner USING smol(k) INCLUDE (v);
ANALYZE t_rescan_outer;
ANALYZE t_rescan_inner;
SET enable_hashjoin = off;
SET enable_mergejoin = off;
SET enable_nestloop = on;
-- Nested loop should rescan inner index for each outer row
SELECT o.k AS outer_k, i.k AS inner_k, i.v
FROM t_rescan_outer o
JOIN t_rescan_inner i ON i.k = o.k
ORDER BY o.k;
 outer_k | inner_k |  v   
---------+---------+------
     100 |     100 | 1000
     200 |     200 | 2000
     300 |     300 | 3000
     400 |     400 | 4000
     500 |     500 | 5000
(5 rows)

SET enable_hashjoin = on;
SET enable_mergejoin = on;
DROP TABLE t_rescan_inner CASCADE;
DROP TABLE t_rescan_outer CASCADE;
-- ============================================================================
-- Coverage: Binary search upper-half branch in new leaf navigation
-- ============================================================================
-- This test triggers the "search upper half" path (lo2 = mid2 + 1) in
-- smol_gettuple's forward scan when binary searching within newly loaded leaves
-- to find the starting position for keys >= bound
-- Create table with enough data for multiple leaf pages
DROP TABLE IF EXISTS t_line2041 CASCADE;
CREATE UNLOGGED TABLE t_line2041 AS
SELECT i AS id, i * 2 AS value
FROM generate_series(1, 100000) i;
-- Create index with INCLUDE to enable index-only scans
CREATE INDEX t_line2041_idx ON t_line2041 USING smol(id) INCLUDE (value);
-- Use test GUC to force find_first_leaf to return a leaf 20 blocks earlier
-- This makes the scan traverse leaves containing keys < 50000
-- During binary search in those leaves, we probe keys < bound, triggering the upper-half search
SET smol.test_leaf_offset = 20;
SET enable_seqscan = off;
SET max_parallel_workers_per_gather = 0;
-- Query with bound in the middle - scan will start early and advance through
-- multiple leaves, binary searching and hitting the "else lo2 = mid2 + 1" branch
SELECT count(*), sum(value) FROM t_line2041 WHERE id >= 50000;
 count |    sum     
-------+------------
 50001 | 7500150000
(1 row)

-- Clean up
RESET smol.test_leaf_offset;
DROP TABLE t_line2041;
-- ============================================================================
-- UTF-8 Collation Support
-- ============================================================================
-- Test UTF-8 collation support for text keys
-- Tests both index building with non-C collations and scan-time comparisons
-- Test 1: Basic UTF-8 collation index creation
DROP TABLE IF EXISTS t_utf8_basic CASCADE;
CREATE TABLE t_utf8_basic (
    name text
);
INSERT INTO t_utf8_basic VALUES
    ('apple'), ('Banana'), ('cherry'), ('Date'),
    ('élève'), ('éclair'), ('café'), ('naïve');
-- Create index with C collation (baseline)
CREATE INDEX t_utf8_basic_c_idx ON t_utf8_basic USING smol(name COLLATE "C");
-- Create index with ICU collation (uses generic comparator during scans)
CREATE INDEX t_utf8_basic_icu_idx ON t_utf8_basic USING smol(name COLLATE "en-US-x-icu");
-- Verify index was created
\d t_utf8_basic
          Table "public.t_utf8_basic"
 Column | Type | Collation | Nullable | Default 
--------+------+-----------+----------+---------
 name   | text |           |          | 
Indexes:
    "t_utf8_basic_c_idx" smol (name COLLATE "C")
    "t_utf8_basic_icu_idx" smol (name COLLATE "en-US-x-icu")

-- Test 2: Longer UTF-8 strings
DROP TABLE IF EXISTS t_utf8_long CASCADE;
CREATE TABLE t_utf8_long (
    description text
);
INSERT INTO t_utf8_long VALUES
    ('café au lait'),
    ('crème brûlée'),
    ('naïve approach'),
    ('résumé submitted'),
    ('Zürich airport');
CREATE INDEX t_utf8_long_idx ON t_utf8_long USING smol(description COLLATE "en-US-x-icu");
-- Test 3: Various length strings
DROP TABLE IF EXISTS t_utf8_lengths CASCADE;
CREATE TABLE t_utf8_lengths (
    val text
);
INSERT INTO t_utf8_lengths VALUES
    ('a'),  -- 1 byte
    ('hello'),  -- 5 bytes
    ('test string here'),  -- 16 bytes
    ('longer text value for testing'),  -- 31 bytes
    ('exactly thirty-two bytes!!!!!!!');  -- 32 bytes
CREATE INDEX t_utf8_lengths_idx ON t_utf8_lengths USING smol(val COLLATE "en-US-x-icu");
-- Test 4: Verify C collation still uses optimized path (8-byte keys for short strings)
DROP TABLE IF EXISTS t_c_collation CASCADE;
CREATE TABLE t_c_collation (
    name text
);
INSERT INTO t_c_collation VALUES ('z'), ('a'), ('m'), ('b');
CREATE INDEX t_c_collation_idx ON t_c_collation USING smol(name COLLATE "C");
-- C collation should use optimized path
SELECT * FROM t_c_collation ORDER BY name COLLATE "C";
 name 
------
 a
 b
 m
 z
(4 rows)

-- Test 5: Range scans with UTF-8 collation (uses generic comparator)
SET enable_seqscan = off;
SET enable_bitmapscan = off;
-- Equality scan
EXPLAIN (COSTS OFF) SELECT * FROM t_utf8_basic WHERE name = 'café' COLLATE "en-US-x-icu";
                         QUERY PLAN                         
------------------------------------------------------------
 Index Only Scan using t_utf8_basic_icu_idx on t_utf8_basic
   Index Cond: (name = 'café'::text COLLATE "en-US-x-icu")
(2 rows)

SELECT * FROM t_utf8_basic WHERE name = 'café' COLLATE "en-US-x-icu";
 name 
------
 café
(1 row)

-- Range scan with lower bound (>=)
EXPLAIN (COSTS OFF) SELECT * FROM t_utf8_basic WHERE name >= 'café' COLLATE "en-US-x-icu" ORDER BY name COLLATE "en-US-x-icu";
                         QUERY PLAN                         
------------------------------------------------------------
 Index Only Scan using t_utf8_basic_icu_idx on t_utf8_basic
   Index Cond: (name >= 'café'::text COLLATE "en-US-x-icu")
(2 rows)

SELECT * FROM t_utf8_basic WHERE name >= 'café' COLLATE "en-US-x-icu" ORDER BY name COLLATE "en-US-x-icu";
  name  
--------
 café
 cherry
 Date
 éclair
 élève
 naïve
(6 rows)

-- Range scan with upper bound (<=)
EXPLAIN (COSTS OFF) SELECT * FROM t_utf8_basic WHERE name <= 'café' COLLATE "en-US-x-icu" ORDER BY name COLLATE "en-US-x-icu";
                         QUERY PLAN                         
------------------------------------------------------------
 Index Only Scan using t_utf8_basic_icu_idx on t_utf8_basic
   Index Cond: (name <= 'café'::text COLLATE "en-US-x-icu")
(2 rows)

SELECT * FROM t_utf8_basic WHERE name <= 'café' COLLATE "en-US-x-icu" ORDER BY name COLLATE "en-US-x-icu";
  name  
--------
 apple
 Banana
 café
(3 rows)

-- Range scan with both bounds (>= AND <=)
EXPLAIN (COSTS OFF) SELECT * FROM t_utf8_basic WHERE name >= 'café' COLLATE "en-US-x-icu" AND name <= 'naïve' COLLATE "en-US-x-icu" ORDER BY name COLLATE "en-US-x-icu";
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Index Only Scan using t_utf8_basic_icu_idx on t_utf8_basic
   Index Cond: ((name >= 'café'::text COLLATE "en-US-x-icu") AND (name <= 'naïve'::text COLLATE "en-US-x-icu"))
(2 rows)

SELECT * FROM t_utf8_basic WHERE name >= 'café' COLLATE "en-US-x-icu" AND name <= 'naïve' COLLATE "en-US-x-icu" ORDER BY name COLLATE "en-US-x-icu";
  name  
--------
 café
 cherry
 Date
 éclair
 élève
 naïve
(6 rows)

-- Range scan with strict bounds (> AND <)
EXPLAIN (COSTS OFF) SELECT * FROM t_utf8_basic WHERE name > 'café' COLLATE "en-US-x-icu" AND name < 'naïve' COLLATE "en-US-x-icu" ORDER BY name COLLATE "en-US-x-icu";
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Index Only Scan using t_utf8_basic_icu_idx on t_utf8_basic
   Index Cond: ((name > 'café'::text COLLATE "en-US-x-icu") AND (name < 'naïve'::text COLLATE "en-US-x-icu"))
(2 rows)

SELECT * FROM t_utf8_basic WHERE name > 'café' COLLATE "en-US-x-icu" AND name < 'naïve' COLLATE "en-US-x-icu" ORDER BY name COLLATE "en-US-x-icu";
  name  
--------
 cherry
 Date
 éclair
 élève
(4 rows)

-- Test 6: Range scans with longer UTF-8 strings
EXPLAIN (COSTS OFF) SELECT * FROM t_utf8_long WHERE description >= 'crème' COLLATE "en-US-x-icu" ORDER BY description COLLATE "en-US-x-icu";
                             QUERY PLAN                             
--------------------------------------------------------------------
 Index Only Scan using t_utf8_long_idx on t_utf8_long
   Index Cond: (description >= 'crème'::text COLLATE "en-US-x-icu")
(2 rows)

SELECT * FROM t_utf8_long WHERE description >= 'crème' COLLATE "en-US-x-icu" ORDER BY description COLLATE "en-US-x-icu";
   description    
------------------
 crème brûlée
 naïve approach
 résumé submitted
 Zürich airport
(4 rows)

RESET enable_seqscan;
RESET enable_bitmapscan;
-- Cleanup
DROP TABLE t_utf8_basic CASCADE;
DROP TABLE t_utf8_long CASCADE;
DROP TABLE t_utf8_lengths CASCADE;
DROP TABLE t_c_collation CASCADE;
--
-- Test TEXT two-column indexes (TEXT + INT4)
-- These tests verify that TEXT can be used as the first key in a two-column index
-- with proper handling of 32-byte fixed-width storage and null-padding
--
-- Test 1: Basic TEXT+INT two-column index with INCLUDE
CREATE TABLE t_text_twocol (k1 text, k2 int4, v int);
INSERT INTO t_text_twocol VALUES
  ('abc', 1, 100),
  ('abc', 2, 200),
  ('abc', 3, 300),
  ('def', 1, 400),
  ('def', 2, 500),
  ('xyz', 1, 600);
CREATE INDEX t_text_twocol_idx ON t_text_twocol USING smol(k1, k2) INCLUDE (v);
SET enable_seqscan = off;
SET enable_bitmapscan = off;
-- Equality on k1, range on k2
EXPLAIN (COSTS OFF) SELECT * FROM t_text_twocol WHERE k1 = 'abc' AND k2 >= 0 ORDER BY k2;
                        QUERY PLAN                        
----------------------------------------------------------
 Index Only Scan using t_text_twocol_idx on t_text_twocol
   Index Cond: ((k1 = 'abc'::text) AND (k2 >= 0))
(2 rows)

SELECT * FROM t_text_twocol WHERE k1 = 'abc' AND k2 >= 0 ORDER BY k2;
 k1  | k2 |  v  
-----+----+-----
 abc |  1 | 100
 abc |  2 | 200
 abc |  3 | 300
(3 rows)

-- Equality on both k1 and k2
EXPLAIN (COSTS OFF) SELECT * FROM t_text_twocol WHERE k1 = 'def' AND k2 = 2;
                        QUERY PLAN                        
----------------------------------------------------------
 Index Only Scan using t_text_twocol_idx on t_text_twocol
   Index Cond: ((k1 = 'def'::text) AND (k2 = 2))
(2 rows)

SELECT * FROM t_text_twocol WHERE k1 = 'def' AND k2 = 2;
 k1  | k2 |  v  
-----+----+-----
 def |  2 | 500
(1 row)

-- Range on k1
EXPLAIN (COSTS OFF) SELECT * FROM t_text_twocol WHERE k1 >= 'abc' AND k1 < 'xyz' ORDER BY k1, k2;
                         QUERY PLAN                         
------------------------------------------------------------
 Index Only Scan using t_text_twocol_idx on t_text_twocol
   Index Cond: ((k1 >= 'abc'::text) AND (k1 < 'xyz'::text))
(2 rows)

SELECT * FROM t_text_twocol WHERE k1 >= 'abc' AND k1 < 'xyz' ORDER BY k1, k2;
 k1  | k2 |  v  
-----+----+-----
 abc |  1 | 100
 abc |  2 | 200
 abc |  3 | 300
 def |  1 | 400
 def |  2 | 500
(5 rows)

-- Backward scan
EXPLAIN (COSTS OFF) SELECT * FROM t_text_twocol WHERE k1 = 'abc' ORDER BY k2 DESC;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Index Only Scan Backward using t_text_twocol_idx on t_text_twocol
   Index Cond: (k1 = 'abc'::text)
(2 rows)

SELECT * FROM t_text_twocol WHERE k1 = 'abc' ORDER BY k2 DESC;
 k1 | k2 | v 
----+----+---
(0 rows)

-- Test 2: TEXT+INT without INCLUDE column
CREATE TABLE t_text_twocol_noinc (k1 text, k2 int4);
INSERT INTO t_text_twocol_noinc VALUES
  ('foo', 10),
  ('foo', 20),
  ('bar', 30);
CREATE INDEX t_text_twocol_noinc_idx ON t_text_twocol_noinc USING smol(k1, k2);
EXPLAIN (COSTS OFF) SELECT k1, k2 FROM t_text_twocol_noinc WHERE k1 = 'foo' ORDER BY k2;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Index Only Scan using t_text_twocol_noinc_idx on t_text_twocol_noinc
   Index Cond: (k1 = 'foo'::text)
(2 rows)

SELECT k1, k2 FROM t_text_twocol_noinc WHERE k1 = 'foo' ORDER BY k2;
 k1 | k2 
----+----
(0 rows)

-- Test 3: TEXT with various lengths (empty, short, medium, near 32-byte boundary)
CREATE TABLE t_text_lengths_twocol (k1 text, k2 int4, id int);
INSERT INTO t_text_lengths_twocol VALUES
  ('', 1, 1),                                      -- empty string
  ('a', 2, 2),                                     -- 1 byte
  ('short', 3, 3),                                 -- 5 bytes
  ('medium length text', 4, 4),                    -- 18 bytes
  ('exactly 31 bytes long text!!', 5, 5),         -- 30 bytes
  ('this text is exactly 32 bytes!', 6, 6);       -- 32 bytes (boundary)
CREATE INDEX t_text_lengths_twocol_idx ON t_text_lengths_twocol USING smol(k1, k2) INCLUDE (id);
-- Query each length category
SELECT k1, k2, id FROM t_text_lengths_twocol WHERE k1 = '' AND k2 = 1;
 k1 | k2 | id 
----+----+----
    |  1 |  1
(1 row)

SELECT k1, k2, id FROM t_text_lengths_twocol WHERE k1 = 'a' AND k2 = 2;
 k1 | k2 | id 
----+----+----
 a  |  2 |  2
(1 row)

SELECT k1, k2, id FROM t_text_lengths_twocol WHERE k1 = 'short' AND k2 = 3;
  k1   | k2 | id 
-------+----+----
 short |  3 |  3
(1 row)

SELECT k1, k2, id FROM t_text_lengths_twocol WHERE k1 = 'medium length text' AND k2 = 4;
         k1         | k2 | id 
--------------------+----+----
 medium length text |  4 |  4
(1 row)

SELECT k1, k2, id FROM t_text_lengths_twocol WHERE k1 = 'exactly 31 bytes long text!!' AND k2 = 5;
              k1              | k2 | id 
------------------------------+----+----
 exactly 31 bytes long text!! |  5 |  5
(1 row)

SELECT k1, k2, id FROM t_text_lengths_twocol WHERE k1 = 'this text is exactly 32 bytes!' AND k2 = 6;
               k1               | k2 | id 
--------------------------------+----+----
 this text is exactly 32 bytes! |  6 |  6
(1 row)

-- Test 4: TEXT+INT with duplicate k1 values (tests RLE compression)
CREATE TABLE t_text_rle_twocol (k1 text, k2 int4, data int);
INSERT INTO t_text_rle_twocol SELECT 'duplicate', i, i*10 FROM generate_series(1, 50) i;
INSERT INTO t_text_rle_twocol SELECT 'another', i, i*20 FROM generate_series(1, 30) i;
CREATE INDEX t_text_rle_twocol_idx ON t_text_rle_twocol USING smol(k1, k2) INCLUDE (data);
-- Query with many duplicate k1 values
SELECT count(*) FROM t_text_rle_twocol WHERE k1 = 'duplicate';
 count 
-------
    50
(1 row)

SELECT count(*) FROM t_text_rle_twocol WHERE k1 = 'another';
 count 
-------
    30
(1 row)

SELECT k1, k2, data FROM t_text_rle_twocol WHERE k1 = 'duplicate' AND k2 BETWEEN 10 AND 15 ORDER BY k2;
    k1     | k2 | data 
-----------+----+------
 duplicate | 10 |  100
 duplicate | 11 |  110
 duplicate | 12 |  120
 duplicate | 13 |  130
 duplicate | 14 |  140
 duplicate | 15 |  150
(6 rows)

-- Verify index structure
SELECT total_pages >= 1 AS has_pages, leaf_pages >= 1 AS has_leaves FROM smol_inspect('t_text_rle_twocol_idx');
 has_pages | has_leaves 
-----------+------------
 t         | t
(1 row)

RESET enable_seqscan;
RESET enable_bitmapscan;
-- Cleanup
DROP TABLE t_text_twocol CASCADE;
DROP TABLE t_text_twocol_noinc CASCADE;
DROP TABLE t_text_lengths_twocol CASCADE;
DROP TABLE t_text_rle_twocol CASCADE;
