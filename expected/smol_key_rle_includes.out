-- Test Key-RLE (0x8001) format with INCLUDE columns
-- Targets lines 3718-3720: accessing includes when keys are RLE but includes are columnar
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
-- ============================================================================
-- Force Key-RLE (0x8001) format by having:
-- 1. Highly repetitive keys (good for RLE)
-- 2. Unique/random includes (bad for RLE, stays columnar)
-- ============================================================================
DROP TABLE IF EXISTS t_key_rle_zerocopy_inc CASCADE;
CREATE UNLOGGED TABLE t_key_rle_zerocopy_inc (k int8, v1 int4, v2 int4);
-- Insert data where:
-- - Keys repeat many times (only 10 distinct keys)
-- - Includes are all unique (no repetition)
INSERT INTO t_key_rle_zerocopy_inc
SELECT
    (i % 10)::int8 AS k,           -- Only 10 distinct keys, highly repetitive
    i AS v1,                        -- All unique
    (i * 7 + 13) AS v2              -- All unique, different pattern
FROM generate_series(1, 50000) i;
CREATE INDEX t_key_rle_zerocopy_inc_smol ON t_key_rle_zerocopy_inc USING smol(k) INCLUDE (v1, v2);
-- Query to access INCLUDE columns (triggers smol1_inc_ptr_any lines 3718-3720)
-- This should use Key-RLE format (0x8001) where keys are RLE but includes are columnar
SELECT k, v1, v2 FROM t_key_rle_zerocopy_inc WHERE k = 3 ORDER BY v1 LIMIT 10;
 k | v1 | v2  
---+----+-----
 3 |  3 |  34
 3 | 13 | 104
 3 | 23 | 174
 3 | 33 | 244
 3 | 43 | 314
 3 | 53 | 384
 3 | 63 | 454
 3 | 73 | 524
 3 | 83 | 594
 3 | 93 | 664
(10 rows)

SELECT k, v1, v2 FROM t_key_rle_zerocopy_inc WHERE k = 7 ORDER BY v1 LIMIT 10;
 k | v1 | v2  
---+----+-----
 7 |  7 |  62
 7 | 17 | 132
 7 | 27 | 202
 7 | 37 | 272
 7 | 47 | 342
 7 | 57 | 412
 7 | 67 | 482
 7 | 77 | 552
 7 | 87 | 622
 7 | 97 | 692
(10 rows)

SELECT k, count(*), min(v1), max(v1) FROM t_key_rle_zerocopy_inc WHERE k >= 5 GROUP BY k ORDER BY k;
 k | count | min |  max  
---+-------+-----+-------
 5 |  5000 |   5 | 49995
 6 |  5000 |   6 | 49996
 7 |  5000 |   7 | 49997
 8 |  5000 |   8 | 49998
 9 |  5000 |   9 | 49999
(5 rows)

-- Try with int32 keys as well
DROP TABLE IF EXISTS t_key_rle_zerocopy_inc2 CASCADE;
CREATE UNLOGGED TABLE t_key_rle_zerocopy_inc2 (k int4, v int8);
INSERT INTO t_key_rle_zerocopy_inc2
SELECT
    (i % 20)::int4 AS k,          -- 20 distinct keys
    i::int8 AS v                   -- All unique
FROM generate_series(1, 100000) i;
CREATE INDEX t_key_rle_zerocopy_inc2_smol ON t_key_rle_zerocopy_inc2 USING smol(k) INCLUDE (v);
-- Access includes
SELECT k, v FROM t_key_rle_zerocopy_inc2 WHERE k = 10 ORDER BY v LIMIT 5;
 k  | v  
----+----
 10 | 10
 10 | 30
 10 | 50
 10 | 70
 10 | 90
(5 rows)

SELECT k, count(*), sum(v) FROM t_key_rle_zerocopy_inc2 WHERE k IN (5, 10, 15) GROUP BY k ORDER BY k;
 k  | count |    sum    
----+-------+-----------
  5 |  5000 | 249975000
 10 |  5000 | 250000000
 15 |  5000 | 250025000
(3 rows)

-- Cleanup
DROP TABLE t_key_rle_zerocopy_inc CASCADE;
DROP TABLE t_key_rle_zerocopy_inc2 CASCADE;
