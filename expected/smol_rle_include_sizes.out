-- Test RLE format with INCLUDE columns of various sizes
-- This test covers lines 2698-2713: size-specific INCLUDE column copying in RLE pages
--
-- Target lines:
-- 2698-2700: plain_inc_cached path for plain pages
-- 2703: rle_run_inc_cached path for RLE pages
-- 2709-2713: Size-specific fast-path copies (4B, 8B, 16B, 2B, 1B)
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
SET enable_seqscan = off;
SET enable_bitmapscan = off;
SET enable_indexonlyscan = on;
SET max_parallel_workers_per_gather = 0;
-- Test 1: RLE with 4-byte INCLUDE (int4) - Line 2709
DROP TABLE IF EXISTS t_rle_inc4 CASCADE;
CREATE UNLOGGED TABLE t_rle_inc4 (k int4, v int4);
-- Insert with long runs (100 consecutive identical rows) to trigger Include-RLE
INSERT INTO t_rle_inc4
SELECT (i / 100), (i / 100) * 100
FROM generate_series(0, 9999) i;
ALTER TABLE t_rle_inc4 SET (autovacuum_enabled = off);
VACUUM (FREEZE, ANALYZE) t_rle_inc4;
CREATE INDEX t_rle_inc4_smol_idx ON t_rle_inc4 USING smol(k) INCLUDE (v);
-- Verify Include-RLE compression is used (tag 0x8003)
SELECT inc_rle_pages > 0 AS has_inc_rle FROM smol_inspect('t_rle_inc4_smol_idx');
 has_inc_rle 
-------------
 t
(1 row)

-- Query to trigger RLE INCLUDE access with 4-byte columns (backward scan)
SELECT k, v FROM t_rle_inc4 WHERE k >= 90 ORDER BY k DESC LIMIT 5;
 k  |  v   
----+------
 99 | 9900
 99 | 9900
 99 | 9900
 99 | 9900
 99 | 9900
(5 rows)

-- Test 2: RLE with 8-byte INCLUDE (int8/date) - Line 2710
DROP TABLE IF EXISTS t_rle_inc8 CASCADE;
CREATE UNLOGGED TABLE t_rle_inc8 (k int4, v1 int8, v2 date);
-- Insert with long runs
INSERT INTO t_rle_inc8
SELECT (i / 100), ((i / 100) * 1000)::int8, ('2024-01-01'::date + (i / 100))
FROM generate_series(0, 9999) i;
ALTER TABLE t_rle_inc8 SET (autovacuum_enabled = off);
VACUUM (FREEZE, ANALYZE) t_rle_inc8;
CREATE INDEX t_rle_inc8_smol_idx ON t_rle_inc8 USING smol(k) INCLUDE (v1, v2);
-- Verify Include-RLE compression
SELECT inc_rle_pages > 0 AS has_inc_rle FROM smol_inspect('t_rle_inc8_smol_idx');
 has_inc_rle 
-------------
 t
(1 row)

-- Query to trigger 8-byte INCLUDE access (backward scan)
SELECT k, v1, v2 FROM t_rle_inc8 WHERE k >= 90 ORDER BY k DESC LIMIT 5;
 k  |  v1   |     v2     
----+-------+------------
 99 | 99000 | 04-09-2024
 99 | 99000 | 04-09-2024
 99 | 99000 | 04-09-2024
 99 | 99000 | 04-09-2024
 99 | 99000 | 04-09-2024
(5 rows)

-- Test 3: RLE with 16-byte INCLUDE (UUID) - Line 2711
DROP TABLE IF EXISTS t_rle_inc16 CASCADE;
CREATE UNLOGGED TABLE t_rle_inc16 (k int4, v uuid);
-- Insert with long runs
INSERT INTO t_rle_inc16
SELECT (i / 100), md5((i / 100)::text)::uuid
FROM generate_series(0, 9999) i;
ALTER TABLE t_rle_inc16 SET (autovacuum_enabled = off);
VACUUM (FREEZE, ANALYZE) t_rle_inc16;
CREATE INDEX t_rle_inc16_smol_idx ON t_rle_inc16 USING smol(k) INCLUDE (v);
-- Verify Include-RLE
SELECT inc_rle_pages > 0 AS has_inc_rle FROM smol_inspect('t_rle_inc16_smol_idx');
 has_inc_rle 
-------------
 t
(1 row)

-- Query to trigger 16-byte INCLUDE access (backward scan)
SELECT k, v FROM t_rle_inc16 WHERE k >= 90 ORDER BY k DESC LIMIT 5;
 k  |                  v                   
----+--------------------------------------
 99 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
 99 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
 99 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
 99 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
 99 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
(5 rows)

-- Test 4: RLE with 2-byte INCLUDE (int2) - Line 2712
DROP TABLE IF EXISTS t_rle_inc2 CASCADE;
CREATE UNLOGGED TABLE t_rle_inc2 (k int4, v int2);
-- Insert with long runs
INSERT INTO t_rle_inc2
SELECT (i / 100), ((i / 100) * 10)::int2
FROM generate_series(0, 9999) i;
ALTER TABLE t_rle_inc2 SET (autovacuum_enabled = off);
VACUUM (FREEZE, ANALYZE) t_rle_inc2;
CREATE INDEX t_rle_inc2_smol_idx ON t_rle_inc2 USING smol(k) INCLUDE (v);
-- Verify Include-RLE
SELECT inc_rle_pages > 0 AS has_inc_rle FROM smol_inspect('t_rle_inc2_smol_idx');
 has_inc_rle 
-------------
 t
(1 row)

-- Query to trigger 2-byte INCLUDE access (backward scan)
SELECT k, v FROM t_rle_inc2 WHERE k >= 90 ORDER BY k DESC LIMIT 5;
 k  |  v  
----+-----
 99 | 990
 99 | 990
 99 | 990
 99 | 990
 99 | 990
(5 rows)

-- Test 5: RLE with 1-byte INCLUDE (bool/char) - Line 2713
DROP TABLE IF EXISTS t_rle_inc1 CASCADE;
CREATE UNLOGGED TABLE t_rle_inc1 (k int4, v1 bool, v2 "char");
-- Insert with long runs
INSERT INTO t_rle_inc1
SELECT (i / 100), ((i / 100) % 2 = 0), chr(65 + ((i / 100) % 26))::"char"
FROM generate_series(0, 9999) i;
ALTER TABLE t_rle_inc1 SET (autovacuum_enabled = off);
VACUUM (FREEZE, ANALYZE) t_rle_inc1;
CREATE INDEX t_rle_inc1_smol_idx ON t_rle_inc1 USING smol(k) INCLUDE (v1, v2);
-- Verify Include-RLE
SELECT inc_rle_pages > 0 AS has_inc_rle FROM smol_inspect('t_rle_inc1_smol_idx');
 has_inc_rle 
-------------
 t
(1 row)

-- Query to trigger 1-byte INCLUDE access (backward scan)
SELECT k, v1, v2 FROM t_rle_inc1 WHERE k >= 90 ORDER BY k DESC LIMIT 5;
 k  | v1 | v2 
----+----+----
 99 | f  | V
 99 | f  | V
 99 | f  | V
 99 | f  | V
 99 | f  | V
(5 rows)

-- Test 6: Mixed INCLUDE sizes in one index (covers multiple lines)
DROP TABLE IF EXISTS t_rle_mixed CASCADE;
CREATE UNLOGGED TABLE t_rle_mixed (
    k int4,
    v_1b bool,
    v_2b int2,
    v_4b int4,
    v_8b int8,
    v_16b uuid
);
-- Insert with long runs
INSERT INTO t_rle_mixed
SELECT
    (i / 100),
    ((i / 100) % 2 = 0),
    ((i / 100) * 10)::int2,
    (i / 100) * 100,
    ((i / 100) * 1000)::int8,
    md5((i / 100)::text)::uuid
FROM generate_series(0, 9999) i;
ALTER TABLE t_rle_mixed SET (autovacuum_enabled = off);
VACUUM (FREEZE, ANALYZE) t_rle_mixed;
CREATE INDEX t_rle_mixed_smol_idx ON t_rle_mixed USING smol(k)
    INCLUDE (v_1b, v_2b, v_4b, v_8b, v_16b);
-- Verify Include-RLE
SELECT
    inc_rle_pages > 0 AS has_inc_rle,
    compression_pct > 50 AS good_compression
FROM smol_inspect('t_rle_mixed_smol_idx');
 has_inc_rle | good_compression 
-------------+------------------
 t           | t
(1 row)

-- Query that accesses all INCLUDE column sizes (backward scan)
SELECT k, v_1b, v_2b, v_4b, v_8b, v_16b
FROM t_rle_mixed
WHERE k >= 90
ORDER BY k DESC
LIMIT 5;
 k  | v_1b | v_2b | v_4b | v_8b  |                v_16b                 
----+------+------+------+-------+--------------------------------------
 99 | f    |  990 | 9900 | 99000 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
 99 | f    |  990 | 9900 | 99000 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
 99 | f    |  990 | 9900 | 99000 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
 99 | f    |  990 | 9900 | 99000 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
 99 | f    |  990 | 9900 | 99000 | ac627ab1-ccbd-b62e-c96e-702f07f6425b
(5 rows)

-- Cleanup
DROP TABLE t_rle_inc4 CASCADE;
DROP TABLE t_rle_inc8 CASCADE;
DROP TABLE t_rle_inc16 CASCADE;
DROP TABLE t_rle_inc2 CASCADE;
DROP TABLE t_rle_inc1 CASCADE;
DROP TABLE t_rle_mixed CASCADE;
