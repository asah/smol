-- Comprehensive smol_validate() coverage via direct catalog manipulation
-- Tests all error paths in smol_validate() (lines 2555-2636)
-- WARNING: This test directly modifies system catalogs and must restore them
SET client_min_messages = warning;
CREATE EXTENSION IF NOT EXISTS smol;
-- Helper function to safely test validation by temporarily corrupting catalog
CREATE OR REPLACE FUNCTION test_smol_validation() RETURNS void AS $$
DECLARE
    test_opclass_oid oid;
    test_opfamily_oid oid;
    backup_amproc_row pg_amproc;
    backup_amop_row pg_amop;
    test_func_oid oid;
    test_op_oid oid;
    validation_result boolean;
BEGIN
    -- Get a real SMOL operator class to work with
    SELECT opc.oid, opc.opcfamily INTO test_opclass_oid, test_opfamily_oid
    FROM pg_opclass opc
    JOIN pg_am am ON opc.opcmethod = am.oid
    WHERE am.amname = 'smol' AND opc.opcname = 'int4_ops'
    LIMIT 1;

    IF test_opclass_oid IS NULL THEN
        RAISE EXCEPTION 'Could not find smol int4_ops operator class';
    END IF;

    RAISE NOTICE 'Testing smol_validate() with opclass OID %', test_opclass_oid;

    -- Test 1: Cross-type support procedure (line 2555)
    -- Add a temporary amproc entry with mismatched left/right types
    RAISE NOTICE 'Test 1: Cross-type support procedure';

    -- Create a helper comparison function
    CREATE TEMP TABLE IF NOT EXISTS validation_cleanup (id serial);

    INSERT INTO pg_amproc (oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc)
    SELECT
        (SELECT (MAX(oid::int4) + 1)::oid FROM pg_amproc),
        test_opfamily_oid,
        'int4'::regtype::oid,
        'int8'::regtype::oid,  -- Different type - triggers cross-type error
        1,
        'btint4cmp'::regproc::oid
    RETURNING * INTO backup_amproc_row;

    -- Call validate (should report cross-type error as INFO and return false)
    SELECT smol_test_validate(test_opclass_oid) INTO validation_result;

    -- Clean up
    DELETE FROM pg_amproc WHERE oid = backup_amproc_row.oid;

    -- Test 2: Invalid support function number (line 2566)
    RAISE NOTICE 'Test 2: Invalid support function number';

    INSERT INTO pg_amproc (oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc)
    SELECT
        (SELECT (MAX(oid::int4) + 1)::oid FROM pg_amproc),
        test_opfamily_oid,
        'int4'::regtype::oid,
        'int4'::regtype::oid,
        2,  -- Wrong number - should be 1
        'btint4cmp'::regproc::oid
    RETURNING * INTO backup_amproc_row;

    SELECT smol_test_validate(test_opclass_oid) INTO validation_result;
    DELETE FROM pg_amproc WHERE oid = backup_amproc_row.oid;

    -- Test 3: Wrong function signature (line 2575)
    RAISE NOTICE 'Test 3: Wrong function signature';

    -- Temporarily replace the real procedure with one with wrong signature
    DELETE FROM pg_amproc
    WHERE amprocfamily = test_opfamily_oid
      AND amproclefttype = 'int4'::regtype::oid
      AND amprocrighttype = 'int4'::regtype::oid
      AND amprocnum = 1
    RETURNING * INTO backup_amproc_row;

    INSERT INTO pg_amproc (oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc)
    VALUES (backup_amproc_row.oid, test_opfamily_oid, 'int4'::regtype::oid, 'int4'::regtype::oid, 1, 'texteq'::regproc::oid);

    SELECT smol_test_validate(test_opclass_oid) INTO validation_result;

    -- Restore original
    DELETE FROM pg_amproc WHERE oid = backup_amproc_row.oid;
    INSERT INTO pg_amproc SELECT (backup_amproc_row).*;

    -- Test 4: Invalid operator strategy number (line 2592)
    RAISE NOTICE 'Test 4: Invalid operator strategy number';

    -- Temporarily replace an operator with one with invalid strategy
    DELETE FROM pg_amop
    WHERE amopfamily = test_opfamily_oid
      AND amoplefttype = 'int4'::regtype::oid
      AND amoprighttype = 'int4'::regtype::oid
      AND amopstrategy = 2
    RETURNING * INTO backup_amop_row;

    INSERT INTO pg_amop (oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily)
    VALUES (backup_amop_row.oid, test_opfamily_oid, 'int4'::regtype::oid, 'int4'::regtype::oid, 6, 's'::"char", backup_amop_row.amopopr, backup_amop_row.amopmethod, 0);

    SELECT smol_test_validate(test_opclass_oid) INTO validation_result;

    -- Restore original
    DELETE FROM pg_amop WHERE oid = backup_amop_row.oid;
    INSERT INTO pg_amop SELECT (backup_amop_row).*;

    -- Test 5: Invalid ORDER BY specification (line 2600)
    RAISE NOTICE 'Test 5: Invalid ORDER BY specification';

    -- Get a sort family OID for the test
    DECLARE
        sort_family_oid oid;
    BEGIN
        SELECT oid INTO sort_family_oid FROM pg_opfamily WHERE opfname = 'integer_ops' LIMIT 1;

        -- Temporarily replace an operator with one that has ORDER BY
        DELETE FROM pg_amop
        WHERE amopfamily = test_opfamily_oid
          AND amoplefttype = 'int4'::regtype::oid
          AND amoprighttype = 'int4'::regtype::oid
          AND amopstrategy = 3
        RETURNING * INTO backup_amop_row;

        INSERT INTO pg_amop (oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily)
        VALUES (backup_amop_row.oid, test_opfamily_oid, 'int4'::regtype::oid, 'int4'::regtype::oid, 3, 's'::"char", backup_amop_row.amopopr, backup_amop_row.amopmethod, sort_family_oid);

        SELECT smol_test_validate(test_opclass_oid) INTO validation_result;

        -- Restore original
        DELETE FROM pg_amop WHERE oid = backup_amop_row.oid;
        INSERT INTO pg_amop SELECT (backup_amop_row).*;
    END;

    -- Test 6: Wrong operator signature (line 2608)
    RAISE NOTICE 'Test 6: Wrong operator signature';

    -- Temporarily replace a real operator with one with wrong signature
    DELETE FROM pg_amop
    WHERE amopfamily = test_opfamily_oid
      AND amoplefttype = 'int4'::regtype::oid
      AND amoprighttype = 'int4'::regtype::oid
      AND amopstrategy = 1
    RETURNING * INTO backup_amop_row;

    INSERT INTO pg_amop (oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily)
    VALUES (backup_amop_row.oid, test_opfamily_oid, 'int4'::regtype::oid, 'int4'::regtype::oid, 1, 's'::"char", '+(int4,int4)'::regoperator::oid, backup_amop_row.amopmethod, 0);

    SELECT smol_test_validate(test_opclass_oid) INTO validation_result;

    -- Restore original
    DELETE FROM pg_amop WHERE oid = backup_amop_row.oid;
    INSERT INTO pg_amop SELECT (backup_amop_row).*;

    -- Test 7: Missing comparator function (line 2631)
    RAISE NOTICE 'Test 7: Missing comparator function';

    -- Temporarily remove the comparator function
    DELETE FROM pg_amproc
    WHERE amprocfamily = test_opfamily_oid
      AND amproclefttype = 'int4'::regtype::oid
      AND amprocrighttype = 'int4'::regtype::oid
      AND amprocnum = 1
    RETURNING * INTO backup_amproc_row;

    SELECT smol_test_validate(test_opclass_oid) INTO validation_result;

    -- Restore the comparator
    INSERT INTO pg_amproc SELECT (backup_amproc_row).*;

    RAISE NOTICE 'All validation tests completed successfully';
END;
$$ LANGUAGE plpgsql;
-- Run the validation tests
-- Note: This requires superuser privileges to modify system catalogs
DO $$
BEGIN
    -- Check if we're superuser
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = current_user AND rolsuper) THEN
        RAISE NOTICE 'Skipping catalog manipulation tests (requires superuser)';
        RAISE NOTICE 'smol_validate() is primarily tested during CREATE OPERATOR CLASS';
    ELSE
        PERFORM test_smol_validation();
    END IF;
END;
$$;
INFO:  smol opfamily int4_ops contains support procedure btint4cmp(integer,integer) with cross-type registration
INFO:  smol opfamily int4_ops contains function btint4cmp(integer,integer) with invalid support number 2
INFO:  smol opfamily int4_ops contains function texteq(text,text) with wrong signature for support number 1
INFO:  smol opfamily int4_ops contains operator <=(integer,integer) with invalid strategy number 6
INFO:  smol opfamily int4_ops contains invalid ORDER BY specification for operator =(integer,integer)
INFO:  smol opfamily int4_ops contains operator +(integer,integer) with wrong signature
INFO:  smol opclass is missing required comparator support function 1
-- Cleanup
DROP FUNCTION IF EXISTS test_smol_validation();
