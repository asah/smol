#!/bin/bash
# Calculate SMOL code coverage excluding GCOV_EXCL marked lines
#
# This script analyzes smol.c.gcov and provides accurate coverage metrics by:
# - Excluding lines marked with GCOV_EXCL_LINE
# - Excluding code blocks between GCOV_EXCL_START and GCOV_EXCL_STOP
# - Reporting both excluded and measured line counts
# - Showing uncovered lines (optionally condensed into sections)
#
# Usage: ./calc_cov.sh [OPTIONS]
#   -c, --condensed    Show uncovered lines condensed into sections
#   -v, --verbose      Show all uncovered lines individually
#   -h, --help         Show this help message
#
# Default: Shows summary only (no line details)
# Requires: smol.c.gcov (generated by 'gcov smol.c' after coverage test run)

MODE="summary"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--condensed)
            MODE="condensed"
            shift
            ;;
        -v|--verbose)
            MODE="verbose"
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo "  -c, --condensed    Show uncovered lines condensed into sections"
            echo "  -v, --verbose      Show all uncovered lines individually"
            echo "  -h, --help         Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

if [ ! -f smol.c.gcov ]; then
    echo "ERROR: smol.c.gcov not found"
    echo "Run 'gcov smol.c' after a coverage test run to generate it"
    exit 1
fi

# First pass: Calculate coverage statistics
awk '
BEGIN { excl_block = 0 }

# Track GCOV_EXCL_START/STOP blocks
/GCOV_EXCL_START/ { excl_block = 1; next }
/GCOV_EXCL_STOP/ { excl_block = 0; next }

# Line is excluded if: in excl_block OR has GCOV_EXCL_LINE
{
    is_excluded = (excl_block || /GCOV_EXCL_LINE/)
    is_uncovered = /^ *#####:/
    is_covered = /^ *[0-9]+\*?:/

    if (is_uncovered) {
        if (is_excluded) {
            excluded_uncov++
        } else {
            uncovered++
        }
    } else if (is_covered) {
        if (is_excluded) {
            excluded_cov++
        } else {
            covered++
        }
    }
}

END {
    total_excluded = excluded_uncov + excluded_cov
    total_measured = uncovered + covered

    if (total_measured > 0) {
        pct = (covered * 100.0) / total_measured
    } else {
        pct = 0
    }

    printf "Coverage Report (excluding GCOV_EXCL):\n"
    printf "========================================\n"
    printf "Excluded lines: %d\n", total_excluded
    printf "  - Excluded uncovered: %d\n", excluded_uncov
    printf "  - Excluded covered: %d\n", excluded_cov
    printf "Measured lines: %d\n", total_measured
    printf "  - Covered: %d\n", covered
    printf "  - Uncovered: %d\n", uncovered
    printf "Coverage: %.2f%%\n", pct
}
' smol.c.gcov

# If verbose or condensed mode, show uncovered lines
if [ "$MODE" = "verbose" ] || [ "$MODE" = "condensed" ]; then
    echo ""
    echo "========================================"

    if [ "$MODE" = "verbose" ]; then
        echo "Uncovered Lines (detailed):"
        echo "========================================"

        # Show all uncovered lines with code
        awk '
        BEGIN { excl_block = 0 }

        /GCOV_EXCL_START/ { excl_block = 1; next }
        /GCOV_EXCL_STOP/ { excl_block = 0; next }

        /^ *#####:/ && !excl_block && !/GCOV_EXCL_LINE/ {
            # Extract line number and code
            match($0, /^ *#####: *([0-9]+):(.*)/, arr)
            line_num = arr[1]
            code = arr[2]
            # Trim leading/trailing whitespace from code
            gsub(/^[ \t]+/, "", code)
            gsub(/[ \t]+$/, "", code)
            printf "  Line %5d: %s\n", line_num, code
        }
        ' smol.c.gcov

    elif [ "$MODE" = "condensed" ]; then
        echo "Uncovered Lines (condensed by section):"
        echo "========================================"

        # Show uncovered lines grouped into consecutive sections
        awk '
        BEGIN {
            excl_block = 0
            in_section = 0
            section_start = 0
            section_end = 0
            prev_line = 0
        }

        /GCOV_EXCL_START/ { excl_block = 1; next }
        /GCOV_EXCL_STOP/ { excl_block = 0; next }

        /^ *#####:/ && !excl_block && !/GCOV_EXCL_LINE/ {
            # Extract line number and code
            match($0, /^ *#####: *([0-9]+):(.*)/, arr)
            line_num = arr[1]
            code = arr[2]
            # Trim leading/trailing whitespace from code
            gsub(/^[ \t]+/, "", code)
            gsub(/[ \t]+$/, "", code)

            # Check if this is consecutive with previous line
            if (!in_section) {
                # Start new section
                section_start = line_num
                section_end = line_num
                section_code = code
                in_section = 1
            } else if (line_num == prev_line + 1) {
                # Continue current section
                section_end = line_num
            } else {
                # Print previous section and start new one
                if (section_start == section_end) {
                    printf "  Line %5d: %s\n", section_start, section_code
                } else {
                    printf "  Lines %5d-%-5d: %s ... (%d lines)\n",
                           section_start, section_end, section_code,
                           (section_end - section_start + 1)
                }

                # Start new section
                section_start = line_num
                section_end = line_num
                section_code = code
            }

            prev_line = line_num
        }

        END {
            # Print last section if any
            if (in_section) {
                if (section_start == section_end) {
                    printf "  Line %5d: %s\n", section_start, section_code
                } else {
                    printf "  Lines %5d-%-5d: %s ... (%d lines)\n",
                           section_start, section_end, section_code,
                           (section_end - section_start + 1)
                }
            }
        }
        ' smol.c.gcov
    fi
fi

echo ""
